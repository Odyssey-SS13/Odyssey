/**
/world
/*
/client/proc/restart_controller(controller in list("Master", "Failsafe"))
/client/proc/debug_controller()
/**
/proc/recover_all_SS_and_recreate_master()
/proc/delete_all_SS_and_recreate_master()
/**
/** @page hooks Code hooks
/hook/foo/proc/bar()
/**
/proc/callHook(hook, list/args=null)
/**
/proc/Recreate_MC()
/**
/** Update next_fire for the next run.
/*
/**
/proc/reset_all_air()
/proc/fix_corrupted_atmos()
/*
/*
/proc/process_atmos_callbacks()
/*!
/**
/**
/*
/****
/*
/*!
/proc/qdel(datum/D, force=FALSE, ...)
/client/verb/NONSENSICAL_VERB_THAT_DOES_NOTHING()
/** Proc DivideOccupations
/* Nuke threats, for making the blue tiles on the station go RED
/client/proc/admin_away()
/**
/*! How material datums work
/proc/find_exposed_wires()
/proc/iconstate2appearance(icon, iconstate)
/proc/icon2appearance(icon)
/image/proc/add_overlay(x)
/image/proc/cut_overlay(x)
/image/proc/cut_overlays(x)
/image/proc/copy_overlays(atom/other, cut_old)
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/*
/**
/**
/client/verb/set_tab(tab as text|null)
/client/verb/send_tabs(tabs as text|null)
/client/verb/remove_tabs(tabs as text|null)
/client/verb/reset_tabs()
/client/verb/panel_ready()
/*!
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/proc/send_gamemode_vote() //CIT CHANGE - adds roundstart gamemode votes
/**
/**
/**
/**
/**
/**
/**
/**
/proc/_addtimer(datum/callback/callback, wait = 0, flags = 0, file, line)
/**
/proc/deltimer(id)
/**
/proc/timeleft(id)
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/proc/get_action_of_type(mob/M, var/action_type)
/* Initializers */
/* General ai_law functions */
/**
/proc/getArmor(melee = 0, bullet = 0, laser = 0, energy = 0, bomb = 0, bio = 0, rad = 0, fire = 0, acid = 0, magic = 0, wound = 0)
/**
/proc/tgalert(mob/User, Message, Title, Button1="Ok", Button2, Button3, StealFocus = TRUE, Timeout = 6000)
/proc/askuser(mob/User,Message, Title, Button1="Ok", Button2, Button3, StealFocus = 1, Timeout = 6000)
/proc/presentpicker(mob/User,Message, Title, Button1="Ok", Button2, Button3, StealFocus = 1,Timeout = 6000,list/values, inputtype = "checkbox", width, height, slidecolor)
/proc/input_bitfield(mob/User, title, bitfield, current_value, nwidth = 350, nheight = 350, nslidecolor, allowed_edit_list = null)
/proc/presentpreflikepicker(mob/User,Message, Title, Button1="Ok", Button2, Button3, StealFocus = 1,Timeout = 6000,list/settings, width, height, slidecolor)
/proc/onclose(mob/user, windowid, atom/ref=null)
/client/verb/windowclose(atomref as text)
/**
/**
/**
/world/proc/ImmediateInvokeAsync(thingtocall, proctocall, ...)
/**
/**
/**
/**
/proc/callback_select(list/callbacks, list/callback_args, savereturns = TRUE, resolution = 1)
/proc/___callbacknew(typepath, arguments)
/**
/**
/**
/**
/**
/**
/**
/proc/Cinematic(id,watcher,datum/callback/special_callback)
/* Intended usage.
/**
/**
/**
/proc/json_serialize_datum(datum/D, list/options)
/proc/json_deserialize_datum(list/jsonlist, list/options, target_type, strict_target_type = FALSE)
/**
/proc/end_cooldown(datum/source, index)
/**
/proc/reset_cooldown(datum/source, index)
/proc/generate_gene_sequence(length=4)
/proc/create_sequence(mutation, active, difficulty)
/proc/getleftblocks(input,blocknumber,blocksize)
/proc/getrightblocks(input,blocknumber,blocksize)
/proc/getblock(input, blocknumber, blocksize=DNA_BLOCK_SIZE)
/proc/setblock(istring, blocknumber, replacement, blocksize=DNA_BLOCK_SIZE)
/proc/scramble_dna(mob/living/carbon/M, ui=FALSE, se=FALSE, probability)
/proc/construct_block(value, values, blocksize=DNA_BLOCK_SIZE)
/proc/deconstruct_block(value, values, blocksize=DNA_BLOCK_SIZE)
/proc/explosion(atom/epicenter, devastation_range, heavy_impact_range, light_impact_range, flash_range, adminlog = TRUE, ignorecap = FALSE, flame_range = 0, silent = FALSE, smoke = FALSE)
/client/proc/check_bomb_impacts()
/proc/wipe_color_and_text(list/atom/wiping)
/proc/dyn_explosion(turf/epicenter, power, flash_range, adminlog = TRUE, ignorecap = TRUE, flame_range = 0, silent = FALSE, smoke = TRUE)
/proc/wave_explosion(turf/target, power, factor = EXPLOSION_DEFAULT_FALLOFF_MULTIPLY, constant = EXPLOSION_DEFAULT_FALLOFF_SUBTRACT, flash = 0, fire = 0, atom/source, speed = 0,
/**
/**
/*	Note from Carnie:
/*
/**
/proc/populate_objective_player_choices()
/proc/populate_objective_choices()
/mutable_appearance
/mutable_appearance/New()
/proc/mutable_appearance(icon, icon_state = "", layer = FLOAT_LAYER, plane = FLOAT_PLANE, alpha = 255, appearance_flags = NONE, color = "#FFFFFF", blend_mode = BLEND_DEFAULT)
/**
/**
/**
/**
/**
/proc/point_midpoint_points(datum/point/a, datum/point/b)	//Obviously will not support multiZ calculations! Same for the two below.
/proc/pixel_length_between_points(datum/point/a, datum/point/b)
/proc/angle_between_points(datum/point/a, datum/point/b)
/proc/profile_show(user, sort = /proc/cmp_profile_avg_time_dsc)
/* * * * * * * * * * * * * * * * * * * * * * * * * *
/proc/select_recipe(list/datum/recipe/avaiable_recipes, obj/obj, exact = 1 as num)
/proc/soullink(typepath, ...)
/world/proc/LoadVerbs(verb_type)
/proc/getScreenSize(widescreen)
/proc/WEAKREF(datum/input)
/proc/TopicHandlers()
/client/verb/checkachievements()
/**
/**
/*!
/*
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/*!
/**
/**
/**
/**
/**
/**
/**
/**
/*!
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/*
/**
/**
/**
/*
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/*	This is what procs do:
/**
/*Del reqs works like this:
/**
/* //Kevinz doesn't want it as a recipe for now, leaving it in if anything ever changes to let it in
/*/datum/crafting_recipe/bow_tablet
/** We update our connects only when we settle down by taking our current and original direction to find our new connects
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/*
/proc/disease_air_spread_walk(turf/start, turf/end)
/*
/*
/*
/*
/*
/proc/Advance_Mix(var/list/D_list)
/proc/SetViruses(datum/reagent/R, list/data)
/proc/AdminCreateVirus(client/user)
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/**
/**
/*
/**
/**
/**
/proc/get_all_ghost_role_eligible(silent = FALSE)
/*
/*
/**
/proc/start_unequip_mob(obj/item/item, mob/source, mob/user, strip_delay)
/proc/finish_unequip_mob(obj/item/item, mob/source, mob/user)
/proc/create_strippable_list(types)
/**
/**
/*
/client/verb/showrevinfo()
/**
/** Prime the stack overflow detector.
/proc/do_teleport(atom/movable/teleatom, atom/destination, precision=null, forceMove = TRUE, datum/effect_system/effectin=null, datum/effect_system/effectout=null, asoundin=null, asoundout=null, no_effects=FALSE, channel=TELEPORT_CHANNEL_BLUESPACE, forced = FALSE, effects_multiplier = 1)
/proc/tele_play_specials(atom/movable/teleatom, atom/location, datum/effect_system/effect, sound)
/proc/find_safe_turf(zlevel, list/zlevels, extended_safety_checks = FALSE, dense_atoms = TRUE)
/proc/get_teleport_turfs(turf/center, precision = 0)
/proc/get_teleport_turf(turf/center, precision = 0)
/*
/*
/turf/open/genturf
/*
/*! Material datum
/** Handles initializing the material.
/**
/** Returns the composition of this material.
/proc/firecone(loc,dir,length)
/proc/get_mixed_mutation(mutation1, mutation2)
/**
/* we've our own
/* Replaced with Alien Nest Ruins
/proc/prepare_screentip_context_icons()
/*
/proc/build_context(list/context, key, allow_image)
/proc/init_skill_datums()
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/*
/**
/**
/**
/**
/**
/**
/**
/**
/proc/is_wire_tool(obj/item/I)
/*
/*
/*
/*
/*
/*
/*
/*
/*
/* BEWARE, THE BELOW NONSENSE IS MADNESS. bones.dm looks more like what I have in mind and is sufficiently clean, don't pay attention to this messiness */
/**
/**
/*
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/turf/add_blood_DNA(list/blood_dna, list/datum/disease/diseases)
/**
/*
/*
/*
/*
/**
/proc/log_directed_talk(atom/source, atom/target, message, message_type, tag)
/**
/proc/log_combat(atom/user, atom/target, what_done, atom/object=null, addition=null)
/**
/proc/log_wound(atom/victim, datum/wound/suffered_wound, dealt_damage, dealt_wound_bonus, dealt_bare_wound_bonus, base_roll)
/**
/**
/**
/**
/**
/* 	Language procs
/* End language procs */
/**
/**
/**
/*
/*	the radio controller is a confusing piece of shit and didnt work
/proc/add_radio(obj/item/radio, freq)
/proc/remove_radio(obj/item/radio, freq)
/proc/remove_radio_all(obj/item/radio)
/*
/proc/get_radio_span(freq)
/proc/get_radio_name(freq)
/proc/message_spans_start(list/spans)
/proc/say_test(text)
/*
/sound
/*! playsound
/proc/playsound(atom/source, soundin, vol as num, vary, extrarange as num, falloff_exponent = SOUND_FALLOFF_EXPONENT, frequency = null, channel = 0, pressure_affected = TRUE, ignore_walls = TRUE,
/*! playsound
/proc/sound_to_playing_players(soundin, volume = 100, vary = FALSE, frequency = 0, channel = 0, pressure_affected = FALSE, sound/S)
/client/proc/playtitlemusic(vol = 85)
/proc/get_rand_frequency()
/proc/get_sfx(soundin)
/world/New()
/world/proc/InitTgs()
/world/proc/HandleTestRun()
/world/proc/SetupLogs()
/world/Topic(T, addr, master, key)
/world/proc/AnnouncePR(announcement, list/payload)
/world/proc/FinishTestRun()
/world/Reboot(reason = 0, fast_track = FALSE)
/world/Del()
/world/proc/update_status()
/world/proc/update_hub_visibility(new_visibility)
/world/proc/incrementMaxZ()
/world/proc/refresh_atmos_grid()
/world/proc/change_fps(new_value = 20)
/world/proc/change_tick_lag(new_value = 0.5)
/world/proc/on_tickrate_change()
/**
/**
/**
/**
/proc/process_teleport_locs()
/**
/**
/**
/**
/**
/**
/**
/**
/*
/**
/**
/client/proc/ResetAmbiencePlayed()
/*
/*-----------------------------------------------------------------------------*/
/*
/*
/*
/**********************Mine areas**************************/
/**********************Lavaland Areas**************************/
/**********************Ice Moon Areas**************************/
/proc/power_failure()
/proc/power_restore()
/proc/power_restore_quick()
/*
/proc/display_roundstart_logout_report()
/*
/*
/proc/AmBloodsucker(mob/living/M, falseIfInDisguise = FALSE)
/*
/proc/changeling_transform(mob/living/carbon/human/user, datum/changelingprofile/chosen_prof)
/*
/proc/is_servant_of_ratvar(mob/M, require_full_power = FALSE, holy_water_check = FALSE)
/proc/is_eligible_servant(mob/M)
/proc/add_servant_of_ratvar(mob/L, silent = FALSE, create_team = TRUE, override_type)
/proc/remove_servant_of_ratvar(mob/L, silent = FALSE)
/proc/iscultist(mob/living/M, require_full_power = FALSE, holy_water_check = FALSE)
/proc/is_convertable_to_cult(mob/living/M,datum/team/cult/specific_cult)
/proc/is_devil(mob/living/M)
/proc/add_devil(mob/living/L, ascendable = FALSE)
/proc/remove_devil(mob/living/L)
/client/proc/run_dynamic_simulations()
/proc/export_dynamic_json_of(ruleset_list)
/proc/spawn_meteors(number = 10, list/meteortypes, dir)
/proc/spawn_meteor(list/meteortypes, dir)
/proc/spaceDebrisStartLoc(startSide, Z)
/proc/spaceDebrisFinishLoc(startSide, Z)
/proc/add_monkey_leader(datum/mind/monkey_mind)
/proc/add_monkey(datum/mind/monkey_mind)
/proc/remove_monkey(datum/mind/monkey_mind)
/proc/is_monkey_leader(datum/mind/monkey_mind)
/proc/is_monkey(datum/mind/monkey_mind)
/proc/is_nuclear_operative(mob/M)
/proc/is_revolutionary(mob/M)
/proc/is_head_revolutionary(mob/M)
/*
/proc/iswizard(mob/living/M)
/**
/*
/*
/proc/cryo_handle_objectives(mob/living/mob_occupant)
/proc/cryoMob(mob/living/mob_occupant, datum/weakref/control_computer_weakref, obj/machinery/cryopod/pod, is_teleporter, initial_name, effects = FALSE)
/*
/*
/*  beacon that receives the teleported prisoner */
/* Holograms!
/*
/*
/**
/*This is the proc for special two-way communication between AI and holopad/people talking near holopad.
/*
/*
/*
/*
/**
/******************** Requests Console ********************/
/** Originally written by errorage, updated by: Carn, needs more work though. I just added some security fixes */
/*******************************\
/**
/**
/**
/*
/**
/*
/**
/proc/seen_by_camera(var/mob/M)
/proc/near_range_camera(var/mob/M)
/proc/near_camera(mob/living/M)
/proc/camera_sort(list/L)
/**
/proc/ijob_compare(list/a,list/b)
/proc/damage_compare(list/a,list/b)
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/*Revised /N
/*
/proc/get_airlock_overlay(icon_state, icon_file, targetlayer = FLOAT_LAYER, targetplane = FLOAT_PLANE)
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/turf/closed/wall/proc/checkForMultipleDoors()
/* //SPLURT edit, now handled better in modular
/*CONTENTS
/************************
/**
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/proc/empulse(turf/epicenter, power, log=0)
/proc/empulse_using_range(turf/epicenter, range, log=0) //make an emp using range instead of power
/**
/**
/**
/**
/**
/**
/**
/**
/turf/closed/wall/proc/place_poster(obj/item/poster/P, mob/user)
/**
/**
/**
/proc/create_portal_pair(turf/source, turf/destination, _lifespan = 300, accuracy = 0, newtype = /obj/effect/portal, atmos_link_override)
/* Simple object type, calls a proc when "stepped" on by something */
/* Sends a message to mob when triggered*/
/* Tosses things in a certain direction */
/* Stops things thrown by a thrower, doesn't do anything */
/* Instant teleporter */
/* Random teleporter, teleports atoms to locations ranging from teleport_x - teleport_x_offset, etc */
/* Fancy teleporter, creates sparks and smokes when used */
/* Simple sound player, Mapper friendly! */
/**
/**
/* Eventually TODO: make snowflake trails like baycode's
/proc/do_smoke(range=0, location=null, smoke_type=/obj/effect/particle_effect/smoke)
/proc/do_sparks(n, c, source)
/proc/do_fake_sparks(n, c, source)
/* Example:
/* This is an attempt to make some easily reusable "particle" type effect, to stop the code
/*
/proc/generate_tracer_between_points(datum/point/starting, datum/point/ending, beam_type, color, qdel_in = 5, light_range = 2, light_color_override, light_intensity = 1, list/turfs)		//Do not pass z-crossing points as that will not be properly (and likely will never be properly until it's absolutely needed) supported!
/**
/**
/**
/**
/*
/******************** Modules ********************/
/******************** Safeguard ********************/
/******************** OneCrew ********************/
/******************** ProtectStation ********************/
/******************** Quarantine ********************/
/******************** OxygenIsToxicToHumans ********************/
/****************** New Freeform ******************/
/******************** Law Removal ********************/
/******************** Reset ********************/
/******************** Purge ********************/
/******************* Full Core Boards *******************/
/******************** Asimov ********************/
/******************** Asimov++ *********************/
/******************** Corporate ********************/
/****************** P.A.L.A.D.I.N. 3.5e **************/
/****************** P.A.L.A.D.I.N. 5e **************/
/********************* Custom *********************/
/****************** T.Y.R.A.N.T. *****************/
/******************** Robocop ********************/
/******************** Antimov ********************/
/******************** Freeform Core ******************/
/******************** Overthrow ******************/
/******************** Hacked AI Module ******************/
/******************* Ion Module *******************/
/******************** Mother Drone  ******************/
/******************** Robodoctor ****************/
/******************** Reporter *******************/
/****************** Thermodynamic *******************/
/******************Live And Let Live*****************/
/******************Guardian of Balance***************/
/******************H.O.G.A.N.***************/
/**
/**
/* Cards
/*
/*
/proc/generate_chromosome()
/*
/* Clown Items
/*
/*
/*
/*
/* This file contains standalone items for debug purposes. */
/*
/*****************************Dice Bags********************************/
/*****************************Dice********************************/
/*
/**
/*
/*
/*	Balls, Bones, and Bountiful Fun
/* Gifts and wrapping paper
/*
/*/obj/item/book/granter/crafting_recipe/bone_bow //Bow crafting for non-ashwalkers
/**
/**
/**
/* Kitchen tools
/* Trays  moved to /obj/item/storage/bag */
/*********************MANUALS (BOOKS)***********************/
/proc/valid_plushie_paths()
/*
/*
/* unneeded, you can craft ducts from plastic
/*
/*
/**
/**
/**
/**
/**
/* Teleportation devices.
/*
/*
/* Toys!
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/**
/**
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/**
/*Common Parts: Parts List: Ignitor, Timer, Infra-red laser, Infra-red sensor, t_scanner, Capacitor, Valve, sensor unit,
/**
/**
/**
/*
/proc/t_ray_scan(mob/viewer, flick_time = 8, distance = 3)
/proc/healthscan(mob/user, mob/living/M, mode = 1, advanced = FALSE)
/proc/chemscan(mob/living/user, mob/living/M)
/proc/woundscan(mob/user, mob/living/carbon/patient, obj/item/healthanalyzer/wound/scanner)
/proc/atmosanalyzer_scan(mixture, mob/living/user, atom/target = src, visible = TRUE)
/proc/slime_scan(mob/living/simple_animal/slime/T, mob/living/user)
/*
/*
/*
/*portable turret*/
/*
/*
/**
/proc/get_viewable_pdas()
/*/////////////////////////////////////////////////////////////////////////
/**********************************************************************
/**********************************************************************
/**********************************************************************
/**********************************************************************
/*
/* moved to modular_sand
/* Stack type objects!
/*
/** Sets the amount of materials per unit for this stack.
/** Updates the custom materials list of this stack.
/**
/**
/**
/**
/** Adds some number of units to this stack.
/** Checks whether this stack can merge itself into another stack.
/** Splits the stack into two stacks.
/*
/*
/*
/*
/* Glass stack types
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/****************************** Others ****************************/
/*
/*
/*
/*
/*
/*
/**
/* Diffrent misc types of sheets
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/* Backpacks
/*
/*
/*
/*
/*
/*
/*
/*
/*
/**
/*
/**
/*
/*
/*
/*
/*
/*
/* First aid storage
/*
/*
/*
/* Types of tanks!
/*
/*
/*
/*
/*
/*
/*
/*
/* Alien shit!
/*
/*
/*
/*
/*
/* skyrat edit - the dresser is useless with our inventory system
/*
/*
/*
/*
/**
/*
/* Morgue stuff
/*
/*
/*
/*
/*
/*
/**
/*
/**
/**
/**
/*Completely generic structures for use by mappers to create fake objects, i.e. display rooms*/
/* Yeah no.
/*
/* Tables and Racks
/*
/**
/*
/*
/*
/*
/*
/*
/*
/*
/* Table Frames
/*
/*
/* Windoor (window door) assembly -Nodrak
/proc/do_electrochromatic_toggle(new_status, id)
/* Full Tile Windows (more obj_integrity) */
/* Beds... get your mind out of the gutter, they're for sleeping!
/*
/*
/* Utility Closets
/*
/*
/*
/*
/*
/*
/*
/**
/**
/**
/turf/baseturf_skipover
/turf/baseturf_skipover/Initialize(mapload)
/turf/baseturf_skipover/shuttle
/turf/baseturf_bottom
/turf/proc/empty(turf_type=/turf/open/space, baseturf_type, list/ignore_typecache, flags)
/turf/proc/copyTurf(turf/T)
/turf/open/copyTurf(turf/T, copy_air = FALSE)
/turf/proc/TerraformTurf(path, new_baseturf, flags)
/turf/proc/get_z_base_turf()
/turf/proc/ChangeTurf(path, list/new_baseturfs, flags)
/turf/open/ChangeTurf(path, list/new_baseturfs, flags)
/turf/proc/ScrapeAway(amount=1, flags)
/turf/proc/PlaceOnBottom(list/new_baseturfs, turf/fake_turf_type)
/turf/proc/PlaceOnTop(list/new_baseturfs, turf/fake_turf_type, flags)
/turf/proc/CopyOnTop(turf/copytarget, ignore_bottom=1, depth=INFINITY, copy_air = FALSE)
/turf/proc/AfterChange(flags) //called after a turf has been replaced in ChangeTurf()
/turf/open/AfterChange(flags)
/turf/open/proc/Assimilate_Air()
/turf/proc/ReplaceWithLattice()
/turf/closed
/turf/closed/Initialize(mapload)
/turf/closed/AfterChange()
/turf/closed/get_smooth_underlay_icon(mutable_appearance/underlay_appearance, turf/asking_turf, adjacency_dir)
/turf/closed/indestructible
/turf/closed/indestructible/rust_heretic_act()
/turf/closed/indestructible/TerraformTurf(path, new_baseturf, flags, defer_change = FALSE, ignore_air = FALSE)
/turf/closed/indestructible/acid_act(acidpwr, acid_volume, acid_id)
/turf/closed/indestructible/Melt()
/turf/closed/indestructible/singularity_act()
/turf/closed/indestructible/oldshuttle
/turf/closed/indestructible/sandstone
/turf/closed/indestructible/wood
/turf/closed/indestructible/oldshuttle/corner
/turf/closed/indestructible/splashscreen
/turf/closed/indestructible/splashscreen/Initialize(mapload)
/turf/closed/indestructible/splashscreen/proc/handle_generic_titlescreen_sizes()
/turf/closed/indestructible/splashscreen/vv_edit_var(var_name, var_value)
/turf/closed/indestructible/start_area
/turf/closed/indestructible/riveted
/turf/closed/indestructible/syndicate
/turf/closed/indestructible/riveted/uranium
/turf/closed/indestructible/abductor
/turf/closed/indestructible/opshuttle
/turf/closed/indestructible/fakeglass
/turf/closed/indestructible/fakeglass/Initialize(mapload)
/turf/closed/indestructible/fakedoor
/turf/closed/indestructible/rock
/turf/closed/indestructible/rock/snow
/turf/closed/indestructible/rock/snow/ice
/turf/closed/indestructible/rock/snow/ice/ore
/turf/closed/indestructible/paper
/turf/closed/indestructible/necropolis
/turf/closed/indestructible/necropolis/get_smooth_underlay_icon(mutable_appearance/underlay_appearance, turf/asking_turf, adjacency_dir)
/turf/closed/indestructible/riveted/boss
/turf/closed/indestructible/riveted/boss/see_through
/turf/closed/indestructible/riveted/boss/get_smooth_underlay_icon(mutable_appearance/underlay_appearance, turf/asking_turf, adjacency_dir)
/turf/closed/indestructible/riveted/hierophant
/turf/closed/indestructible/rock/glacierrock
/turf/closed/indestructible/rock/glacierrock/blue
/turf/closed/get_yelling_resistance(power)
/turf/open
/turf/open/ComponentInitialize()
/turf/open/zPassIn(atom/movable/A, direction, turf/source)
/turf/open/zPassOut(atom/movable/A, direction, turf/destination)
/turf/open/zAirIn(direction, turf/source)
/turf/open/zAirOut(direction, turf/source)
/turf/open/MouseDrop_T(atom/dropping, mob/user)
/turf/open/indestructible
/turf/open/indestructible/Melt()
/turf/open/indestructible/singularity_act()
/turf/open/indestructible/TerraformTurf(path, new_baseturf, flags, defer_change = FALSE, ignore_air = FALSE)
/turf/open/indestructible/sound
/turf/open/indestructible/sound/Entered(var/mob/AM)
/turf/open/indestructible/cobble/side
/turf/open/indestructible/cobble/corner
/turf/open/indestructible/cobble
/turf/open/indestructible/necropolis
/turf/open/indestructible/necropolis/Initialize(mapload)
/turf/open/indestructible/necropolis/ice
/turf/open/indestructible/necropolis/air
/turf/open/indestructible/boss //you put stone tiles on this and use it as a base
/turf/open/indestructible/boss/air
/turf/open/indestructible/hierophant
/turf/open/indestructible/hierophant/two
/turf/open/indestructible/hierophant/get_smooth_underlay_icon(mutable_appearance/underlay_appearance, turf/asking_turf, adjacency_dir)
/turf/open/indestructible/paper
/turf/open/indestructible/binary
/turf/open/indestructible/airblock
/turf/open/indestructible/clock_spawn_room
/turf/open/indestructible/clock_spawn_room/Entered()
/turf/open/indestructible/clock_spawn_room/Destroy()
/turf/open/indestructible/clock_spawn_room/process()
/turf/open/indestructible/clock_spawn_room/proc/port_servants()
/turf/open/Initalize_Atmos(times_fired)
/turf/open/proc/GetHeatCapacity()
/turf/open/proc/GetTemperature()
/turf/open/proc/TakeTemperature(temp)
/turf/open/proc/freon_gas_act()
/turf/open/proc/water_vapor_gas_act()
/turf/open/handle_slip(mob/living/carbon/C, knockdown_amount, obj/O, lube)
/turf/open/proc/MakeSlippery(wet_setting = TURF_WET_WATER, min_wet_time = 0, wet_time_to_add = 0, max_wet_time = MAXIMUM_WET_TIME, permanent)
/turf/open/proc/MakeDry(wet_setting = TURF_WET_WATER, immediate = FALSE, amount = INFINITY)
/turf/open/get_dumping_location()
/turf/open/proc/ClearWet()//Nuclear option of immediately removing slipperyness from the tile instead of the natural drying over time
/turf/open/rad_act(pulse_strength)
/turf
/turf/vv_edit_var(var_name, new_value)
/**
/turf/Initialize(mapload)
/turf/proc/__auxtools_update_turf_temp_info()
/turf/return_temperature()
/turf/proc/set_temperature()
/turf/proc/Initalize_Atmos(times_fired)
/turf/Destroy(force)
/turf/on_attack_hand(mob/user)
/turf/proc/multiz_turf_del(turf/T, dir)
/turf/proc/multiz_turf_new(turf/T, dir)
/turf/proc/zPassIn(atom/movable/A, direction, turf/source)
/turf/proc/zPassOut(atom/movable/A, direction, turf/destination)
/turf/proc/zAirIn(direction, turf/source)
/turf/proc/zAirOut(direction, turf/source)
/turf/proc/zImpact(atom/movable/A, levels = 1, turf/prev_turf)
/turf/proc/can_zFall(atom/movable/A, levels = 1, turf/target)
/turf/proc/zFall(atom/movable/A, levels = 1, force = FALSE)
/turf/proc/handleRCL(obj/item/rcl/C, mob/user)
/turf/attackby(obj/item/C, mob/user, params)
/turf/Enter(atom/movable/mover, atom/oldloc)
/turf/Exit(atom/movable/mover, atom/newloc)
/turf/Entered(atom/movable/AM)
/turf/open/Entered(atom/movable/AM)
/turf/proc/is_plasteel_floor()
/turf/proc/assemble_baseturfs(turf/fake_baseturf_type)
/turf/proc/levelupdate()
/turf/open/space/levelupdate()
/turf/proc/RemoveLattice()
/turf/proc/phase_damage_creatures(damage,mob/U = null)//>Ninja Code. Hurts and knocks out creatures on this turf //NINJACODE
/turf/proc/Bless()
/turf/storage_contents_dump_act(datum/component/storage/src_object, mob/user)
/turf/proc/Distance(var/turf/T)
/turf/proc/Distance_cardinal(turf/T)
/turf/singularity_act()
/turf/proc/can_have_cabling()
/turf/proc/can_lay_cable()
/turf/proc/visibilityChanged()
/turf/proc/burn_tile()
/turf/proc/is_shielded()
/turf/contents_explosion(severity, target, origin)
/turf/wave_ex_act(power, datum/wave_explosion/explosion, dir)
/turf/narsie_act(force, ignore_mobs, probability = 20)
/turf/ratvar_act(force, ignore_mobs, probability = 40)
/turf/shove_act(mob/living/target, mob/living/user, pre_act = FALSE)
/turf/proc/get_smooth_underlay_icon(mutable_appearance/underlay_appearance, turf/asking_turf, adjacency_dir)
/turf/proc/add_blueprints(atom/movable/AM)
/turf/proc/add_blueprints_preround(atom/movable/AM)
/turf/proc/is_transition_turf()
/turf/acid_act(acidpwr, acid_volume)
/turf/proc/acid_melt()
/turf/handle_fall(mob/faller, forced)
/turf/proc/photograph(limit=20)
/turf/AllowDrop()
/turf/proc/add_vomit_floor(mob/living/M, toxvomit = NONE, purge_ratio = 0.1)
/proc/clear_reagents_to_vomit_pool(mob/living/carbon/M, obj/effect/decal/cleanable/vomit/V, purge_ratio = 0.1)
/turf/proc/Melt()
/turf/proc/get_yelling_resistance(power)
/**
/turf/proc/reachableAdjacentTurfs(caller, ID, simulated_only)
/**
/turf/open/floor/catwalk_floor
/turf/open/floor/catwalk_floor/Initialize(mapload)
/turf/open/floor/catwalk_floor/update_overlays()
/turf/open/floor/catwalk_floor/screwdriver_act(mob/living/user, obj/item/tool)
/turf/open/floor/catwalk_floor/crowbar_act(mob/user, obj/item/I)
/turf/open/transparent
/turf/open/transparent/Initialize(mapload) // handle plane and layer here so that they don't cover other obs/turfs in Dream Maker
/turf/open/transparent/LateInitialize()
/turf/open/transparent/Destroy()
/turf/open/transparent/update_multiz(prune_on_fail = FALSE, init = FALSE)
/turf/open/transparent/multiz_turf_del(turf/T, dir)
/turf/open/transparent/multiz_turf_new(turf/T, dir)
/turf/open/transparent/proc/show_bottom_level()
/turf/open/transparent/glass
/turf/open/transparent/glass/Initialize(mapload)
/turf/open/floor/glass/LateInitialize()
/turf/open/transparent/glass/wrench_act(mob/living/user, obj/item/I)
/turf/open/transparent/glass/reinforced
/turf/open/transparent/glass/reinforced/wrench_act(mob/living/user, obj/item/I)
/turf/open/chasm
/turf/open/chasm/Initialize(mapload)
/turf/open/chasm/proc/set_target(turf/target)
/turf/open/chasm/proc/drop(atom/movable/AM)
/turf/open/chasm/MakeSlippery(wet_setting, min_wet_time, wet_time_to_add, max_wet_time, permanent)
/turf/open/chasm/MakeDry()
/turf/open/chasm/rcd_vals(mob/user, obj/item/construction/rcd/the_rcd)
/turf/open/chasm/rcd_act(mob/user, obj/item/construction/rcd/the_rcd, passed_mode)
/turf/open/chasm/get_smooth_underlay_icon(mutable_appearance/underlay_appearance, turf/asking_turf, adjacency_dir)
/turf/open/chasm/attackby(obj/item/C, mob/user, params, area/area_restriction)
/turf/open/chasm/lavaland
/turf/open/chasm/icemoon
/turf/open/chasm/jungle
/turf/open/chasm/jungle/get_smooth_underlay_icon(mutable_appearance/underlay_appearance, turf/asking_turf, adjacency_dir)
/turf/open/chasm/magic
/turf/open/chasm/magic/Initialize(mapload)
/turf/open/floor/proc/MakeDirty()
/turf/open/floor
/turf/open/floor/Initialize(mapload)
/turf/open/floor/ex_act(severity, target, origin)
/turf/open/floor/wave_ex_act(power, datum/wave_explosion/explosion, dir)
/turf/open/floor/is_shielded()
/turf/open/floor/blob_act(obj/structure/blob/B)
/turf/open/floor/update_icon()
/turf/open/floor/attack_paw(mob/user)
/turf/open/floor/proc/gets_drilled()
/turf/open/floor/proc/break_tile_to_plating()
/turf/open/floor/proc/break_tile()
/turf/open/floor/burn_tile()
/turf/open/floor/proc/make_plating()
/turf/open/floor/ChangeTurf(path, new_baseturf, flags)
/turf/open/floor/attackby(obj/item/C, mob/user, params)
/turf/open/floor/crowbar_act(mob/living/user, obj/item/I)
/turf/open/floor/proc/try_replace_tile(obj/item/stack/tile/T, mob/user, params)
/turf/open/floor/proc/pry_tile(obj/item/I, mob/user, silent = FALSE)
/turf/open/floor/proc/remove_tile(mob/user, silent = FALSE, make_tile = TRUE, forced = FALSE)
/turf/open/floor/proc/spawn_tile()
/turf/open/floor/singularity_pull(S, current_size)
/turf/open/floor/narsie_act(force, ignore_mobs, probability = 20)
/turf/open/floor/ratvar_act(force, ignore_mobs)
/turf/open/floor/acid_melt()
/turf/open/floor/rcd_vals(mob/user, obj/item/construction/rcd/the_rcd)
/turf/open/floor/rcd_act(mob/user, obj/item/construction/rcd/the_rcd, passed_mode)
/turf/open/floor/material
/turf/open/floor/material/spawn_tile()
/turf/open/floor/glass
/turf/open/floor/glass/Initialize(mapload)
/turf/open/floor/glass/LateInitialize()
/turf/open/floor/glass/crowbar_act(mob/living/user, obj/item/I)
/turf/open/floor/glass/wrench_act(mob/living/user, obj/item/I)
/turf/open/floor/glass/reinforced
/turf/open/floor/glass/reinforced/wrench_act(mob/living/user, obj/item/I)
/turf/open/lava
/turf/open/lava/ex_act(severity, target, origin)
/turf/open/lava/MakeSlippery(wet_setting, min_wet_time, wet_time_to_add, max_wet_time, permanent)
/turf/open/lava/Melt()
/turf/open/lava/acid_act(acidpwr, acid_volume)
/turf/open/lava/MakeDry(wet_setting = TURF_WET_WATER)
/turf/open/lava/airless
/turf/open/lava/Entered(atom/movable/AM)
/turf/open/lava/hitby(atom/movable/AM, skipcatch, hitpush, blocked, datum/thrownthing/throwingdatum)
/turf/open/lava/process()
/turf/open/lava/rcd_vals(mob/user, obj/item/construction/rcd/the_rcd)
/turf/open/lava/rcd_act(mob/user, obj/item/construction/rcd/the_rcd, passed_mode)
/turf/open/lava/singularity_act()
/turf/open/lava/singularity_pull(S, current_size)
/turf/open/lava/get_smooth_underlay_icon(mutable_appearance/underlay_appearance, turf/asking_turf, adjacency_dir)
/turf/open/lava/GetHeatCapacity()
/turf/open/lava/GetTemperature()
/turf/open/lava/TakeTemperature(temp)
/turf/open/lava/attackby(obj/item/C, mob/user, params)
/turf/open/lava/proc/is_safe()
/turf/open/lava/proc/burn_stuff(atom/movable/to_burn, delta_time = 1)
/turf/open/lava/proc/can_burn_stuff(atom/movable/burn_target)
/turf/open/lava/proc/do_burn(atom/movable/burn_target, delta_time = 1)
/turf/open/lava/smooth
/turf/open/lava/smooth/lava_land_surface
/turf/open/lava/smooth/airless
/**********************Mineral deposits**************************/
/turf/closed/mineral //wall piece
/turf/closed/mineral/Initialize(mapload)
/turf/closed/mineral/proc/Spread_Vein()
/turf/closed/mineral/proc/Change_Ore(ore_type, random = 0)
/turf/closed/mineral/get_smooth_underlay_icon(mutable_appearance/underlay_appearance, turf/asking_turf, adjacency_dir)
/turf/closed/mineral/attackby(obj/item/pickaxe/I, mob/user, params)
/turf/closed/mineral/attack_hand(mob/user)
/turf/closed/mineral/proc/gets_drilled(user, give_exp = FALSE)
/turf/closed/mineral/attack_animal(mob/living/simple_animal/user, list/modifiers)
/turf/closed/mineral/attack_alien(mob/living/carbon/alien/user, list/modifiers)
/turf/closed/mineral/attack_hulk(mob/living/carbon/human/H)
/turf/closed/mineral/Bumped(atom/movable/AM)
/turf/closed/mineral/acid_melt()
/turf/closed/mineral/ex_act(severity, target, origin)
/turf/closed/mineral/random
/turf/closed/mineral/random/Initialize(mapload)
/turf/closed/mineral/random/high_chance
/turf/closed/mineral/random/high_chance/volcanic
/turf/closed/mineral/random/low_chance
/turf/closed/mineral/random/volcanic
/turf/closed/mineral/random/snow
/turf/closed/mineral/random/snow/Change_Ore(ore_type, random = 0)
/turf/closed/mineral/random/snow
/turf/closed/mineral/random/snow/underground
/turf/closed/mineral/random/snow/high_chance
/turf/closed/mineral/random/labormineral
/turf/closed/mineral/random/labormineral/volcanic
/turf/closed/mineral/random/labormineral/ice
/turf/closed/mineral/random/labormineral/ice/Change_Ore(ore_type, random = 0)
/turf/closed/mineral/iron
/turf/closed/mineral/iron/ice
/turf/closed/mineral/uranium
/turf/closed/mineral/diamond
/turf/closed/mineral/diamond/ice
/turf/closed/mineral/gold
/turf/closed/mineral/gold/volcanic
/turf/closed/mineral/silver
/turf/closed/mineral/silver/ice/icemoon
/turf/closed/mineral/titanium
/turf/closed/mineral/plasma
/turf/closed/mineral/plasma/ice
/turf/closed/mineral/bananium
/turf/closed/mineral/bscrystal
/turf/closed/mineral/bscrystal/volcanic
/turf/closed/mineral/volcanic
/turf/closed/mineral/volcanic/lava_land_surface
/turf/closed/mineral/ash_rock //wall piece
/turf/closed/mineral/snowmountain
/turf/closed/mineral/snowmountain/icemoon
/turf/closed/mineral/snowmountain/cavern
/turf/closed/mineral/snowmountain/cavern/icemoon
/turf/closed/mineral/gibtonite
/turf/closed/mineral/gibtonite/Initialize(mapload)
/turf/closed/mineral/gibtonite/attackby(obj/item/I, mob/user, params)
/turf/closed/mineral/gibtonite/proc/explosive_reaction(mob/user = null, triggered_by_explosion = 0)
/turf/closed/mineral/gibtonite/proc/countdown(notify_admins = FALSE)
/turf/closed/mineral/gibtonite/proc/defuse()
/turf/closed/mineral/gibtonite/gets_drilled(mob/user, triggered_by_explosion = FALSE)
/turf/closed/mineral/gibtonite/volcanic
/turf/closed/mineral/gibtonite/ice
/turf/closed/mineral/gibtonite/ice/icemoon
/turf/closed/mineral/strong
/turf/closed/mineral/strong/gets_drilled(mob/user)
/turf/closed/mineral/strong/proc/drop_ores()
/turf/closed/mineral/strong/acid_melt()
/turf/closed/mineral/strong/ex_act(severity, target, origin)
/turf/open/openspace
/turf/open/openspace/airless
/turf/open/openspace/Initialize(mapload) // handle plane and layer here so that they don't cover other obs/turfs in Dream Maker
/turf/open/openspace/LateInitialize()
/turf/open/openspace/can_have_cabling()
/turf/open/openspace/zAirIn()
/turf/open/openspace/zAirOut()
/turf/open/openspace/zPassIn(atom/movable/A, direction, turf/source)
/turf/open/openspace/zPassOut(atom/movable/A, direction, turf/destination)
/turf/open/openspace/proc/CanCoverUp()
/turf/open/openspace/proc/CanBuildHere()
/turf/open/openspace/attackby(obj/item/C, mob/user, params)
/turf/open/openspace/rcd_vals(mob/user, obj/item/construction/rcd/the_rcd)
/turf/open/openspace/rcd_act(mob/user, obj/item/construction/rcd/the_rcd, passed_mode)
/turf/open/openspace/icemoon
/turf/open/openspace/icemoon/Initialize(mapload)
/turf/open/openspace/icemoon/keep_below
/turf/open/openspace/icemoon/ruins
/turf/open/indestructible/reebe_void
/turf/open/indestructible/reebe_void/Initialize(mapload)
/turf/open/indestructible/reebe_void/spawning
/turf/open/indestructible/reebe_void/spawning/Initialize(mapload)
/turf/open/indestructible/reebe_void/spawning/lattices
/turf/open/indestructible/reebe_void/spawning/lattices/Initialize(mapload)
/turf/open/indestructible/reebe_void/Enter(atom/movable/AM, atom/old_loc)
/proc/spawn_rivers(target_z, nodes = 4, turf_type = /turf/open/lava/smooth/lava_land_surface, whitelist_area = /area/lavaland/surface/outdoors/unexplored, min_x = RANDOM_LOWER_X, min_y = RANDOM_LOWER_Y, max_x = RANDOM_UPPER_X, max_y = RANDOM_UPPER_Y, new_baseturfs)
/turf/proc/Spread(probability = 30, prob_loss = 25, whitelisted_area)
/turf/closed/wall
/turf/closed/wall/examine(mob/user)
/turf/closed/wall/proc/deconstruction_hints(mob/user)
/turf/closed/wall/attack_tk()
/turf/closed/wall/proc/dismantle_wall(devastated=0, explode=0)
/turf/closed/wall/proc/break_wall()
/turf/closed/wall/proc/devastate_wall()
/turf/closed/wall/ex_act(severity, target, origin)
/turf/closed/wall/wave_ex_act(power, datum/wave_explosion/explosion, dir)
/turf/closed/wall/blob_act(obj/structure/blob/B)
/turf/closed/wall/attack_paw(mob/living/user)
/turf/closed/wall/attack_animal(mob/living/simple_animal/M)
/turf/closed/wall/attack_hulk(mob/living/carbon/user)
/**
/turf/closed/wall/proc/hulk_recoil(obj/item/bodypart/arm, mob/living/carbon/human/hulkman, var/damage = 20)
/turf/closed/wall/on_attack_hand(mob/user, act_intent = user.a_intent, unarmed_attack_flags)
/turf/closed/wall/attackby(obj/item/W, mob/user, params)
/turf/closed/wall/proc/try_clean(obj/item/W, mob/user, turf/T)
/turf/closed/wall/proc/try_wallmount(obj/item/W, mob/user, turf/T)
/turf/closed/wall/proc/try_decon(obj/item/I, mob/user, turf/T)
/turf/closed/wall/proc/try_destroy(obj/item/I, mob/user, turf/T)
/turf/closed/wall/singularity_pull(S, current_size)
/turf/closed/wall/narsie_act(force, ignore_mobs, probability = 20)
/turf/closed/wall/ratvar_act(force, ignore_mobs)
/turf/closed/wall/get_dumping_location(obj/item/storage/source, mob/user)
/turf/closed/wall/acid_act(acidpwr, acid_volume)
/turf/closed/wall/acid_melt()
/turf/closed/wall/rcd_vals(mob/user, obj/item/construction/rcd/the_rcd)
/turf/closed/wall/rcd_act(mob/user, obj/item/construction/rcd/the_rcd, passed_mode)
/turf/closed/wall/proc/add_dent(denttype, x=rand(-8, 8), y=rand(-8, 8))
/turf/closed/wall/rust_heretic_act()
/turf/open/water
/turf/open/water/decorative
/* In this file:
/turf/open/floor/wood
/turf/open/floor/wood/examine(mob/user)
/turf/open/floor/wood/screwdriver_act(mob/living/user, obj/item/I)
/turf/open/floor/wood/try_replace_tile(obj/item/stack/tile/T, mob/user, params)
/turf/open/floor/wood/pry_tile(obj/item/C, mob/user, silent = FALSE)
/turf/open/floor/wood/remove_tile(mob/user, silent = FALSE, make_tile = TRUE, forced = FALSE)
/turf/open/floor/wood/rust_heretic_act()
/turf/open/floor/wood/cold
/turf/open/floor/wood/airless
/turf/open/floor/wood/wood_large
/turf/open/floor/wood/wood_tiled
/turf/open/floor/wood/wood_diagonal
/turf/open/floor/grass
/turf/open/floor/grass/Initialize(mapload)
/turf/open/floor/grass/attackby(obj/item/C, mob/user, params)
/turf/open/floor/grass/fairy //like grass but fae-er
/turf/open/floor/grass/fairy/white
/turf/open/floor/grass/fairy/red
/turf/open/floor/grass/fairy/yellow
/turf/open/floor/grass/fairy/green
/turf/open/floor/grass/fairy/blue
/turf/open/floor/grass/fairy/purple
/turf/open/floor/grass/fairy/pink
/turf/open/floor/grass/snow
/turf/open/floor/grass/snow/try_replace_tile(obj/item/stack/tile/T, mob/user, params)
/turf/open/floor/grass/snow/crowbar_act(mob/living/user, obj/item/I)
/turf/open/floor/grass/snow/basalt //By your powers combined, I am captain planet
/turf/open/floor/grass/snow/basalt/Initialize(mapload)
/turf/open/floor/grass/fakebasalt //Heart is not a real planeteer power
/turf/open/floor/grass/fakebasalt/Initialize(mapload)
/turf/open/floor/carpet
/turf/open/floor/carpet/examine(mob/user)
/turf/open/floor/carpet/Initialize(mapload)
/turf/open/floor/carpet/update_icon()
/turf/open/floor/carpet/black
/turf/open/floor/carpet/arcade
/turf/open/floor/carpet/blackred
/turf/open/floor/carpet/monochrome
/turf/open/floor/carpet/blue
/turf/open/floor/carpet/cyan
/turf/open/floor/carpet/green
/turf/open/floor/carpet/orange
/turf/open/floor/carpet/purple
/turf/open/floor/carpet/red
/turf/open/floor/carpet/royalblack
/turf/open/floor/carpet/royalblue
/turf/open/floor/carpet/airless
/turf/open/floor/carpet/black/airless
/turf/open/floor/carpet/blackred/airless
/turf/open/floor/carpet/monochrome/airless
/turf/open/floor/carpet/blue/airless
/turf/open/floor/carpet/cyan/airless
/turf/open/floor/carpet/green/airless
/turf/open/floor/carpet/orange/airless
/turf/open/floor/carpet/purple/airless
/turf/open/floor/carpet/red/airless
/turf/open/floor/carpet/royalblack/airless
/turf/open/floor/carpet/royalblue/airless
/turf/open/floor/carpet/narsie_act(force, ignore_mobs, probability = 20)
/turf/open/floor/carpet/break_tile()
/turf/open/floor/carpet/burn_tile()
/turf/open/floor/carpet/get_smooth_underlay_icon(mutable_appearance/underlay_appearance, turf/asking_turf, adjacency_dir)
/turf/open/floor/fakepit
/turf/open/floor/fakepit/get_smooth_underlay_icon(mutable_appearance/underlay_appearance, turf/asking_turf, adjacency_dir)
/turf/open/floor/fakespace
/turf/open/floor/fakespace/Initialize(mapload)
/turf/open/floor/fakespace/get_smooth_underlay_icon(mutable_appearance/underlay_appearance, turf/asking_turf, adjacency_dir)
/turf/open/floor/light
/turf/open/floor/light/examine(mob/user)
/turf/open/floor/light/Initialize(mapload)
/turf/open/floor/light/break_tile()
/turf/open/floor/light/update_icon()
/turf/open/floor/light/ChangeTurf(path, new_baseturf, flags)
/turf/open/floor/light/on_attack_hand(mob/user, act_intent = user.a_intent, unarmed_attack_flags)
/turf/open/floor/light/attack_ai(mob/user)
/turf/open/floor/light/attackby(obj/item/C, mob/user, params)
/turf/open/floor/light/colour_cycle
/turf/open/floor/light/colour_cycle/dancefloor_a
/turf/open/floor/light/colour_cycle/dancefloor_b
/* In this file:
/turf/open/floor/mineral
/turf/open/floor/mineral/Initialize(mapload)
/turf/open/floor/mineral/update_icon()
/turf/open/floor/mineral/plasma
/turf/open/floor/mineral/plasma/temperature_expose(datum/gas_mixture/air, exposed_temperature, exposed_volume)
/turf/open/floor/mineral/plasma/attackby(obj/item/W, mob/user, params)
/turf/open/floor/mineral/plasma/proc/PlasmaBurn(temperature)
/turf/open/floor/mineral/plasma/proc/ignite(exposed_temperature)
/turf/open/floor/mineral/plasma/disco
/turf/open/floor/mineral/plasma/disco/crowbar_act(mob/living/user, obj/item/I)
/turf/open/floor/mineral/gold
/turf/open/floor/mineral/silver
/turf/open/floor/mineral/titanium
/turf/open/floor/mineral/titanium/airless
/turf/open/floor/mineral/titanium/yellow
/turf/open/floor/mineral/titanium/yellow/airless
/turf/open/floor/mineral/titanium/blue
/turf/open/floor/mineral/titanium/blue/airless
/turf/open/floor/mineral/titanium/white
/turf/open/floor/mineral/titanium/white/airless
/turf/open/floor/mineral/titanium/purple
/turf/open/floor/mineral/titanium/purple/airless
/turf/open/floor/mineral/plastitanium
/turf/open/floor/mineral/plastitanium/airless
/turf/open/floor/mineral/plastitanium/red
/turf/open/floor/mineral/plastitanium/red/airless
/turf/open/floor/mineral/plastitanium/red/brig
/turf/open/floor/mineral/bananium
/turf/open/floor/mineral/bananium/Entered(var/mob/living/L)
/turf/open/floor/mineral/bananium/attackby(obj/item/W, mob/user, params)
/turf/open/floor/mineral/bananium/on_attack_hand(mob/user, act_intent = user.a_intent, unarmed_attack_flags)
/turf/open/floor/mineral/bananium/attack_paw(mob/user)
/turf/open/floor/mineral/bananium/proc/honk()
/turf/open/floor/mineral/bananium/proc/squeak()
/turf/open/floor/mineral/bananium/airless
/turf/open/floor/mineral/diamond
/turf/open/floor/mineral/uranium
/turf/open/floor/mineral/uranium/Entered(var/mob/AM)
/turf/open/floor/mineral/uranium/attackby(obj/item/W, mob/user, params)
/turf/open/floor/mineral/uranium/on_attack_hand(mob/user, act_intent = user.a_intent, unarmed_attack_flags)
/turf/open/floor/mineral/uranium/attack_paw(mob/user)
/turf/open/floor/mineral/uranium/proc/radiate()
/turf/open/floor/mineral/abductor
/turf/open/floor/mineral/abductor/Initialize(mapload)
/turf/open/floor/mineral/abductor/break_tile()
/turf/open/floor/mineral/abductor/burn_tile()
/turf/open/floor/goonplaque
/turf/open/floor/vault
/turf/open/floor/circuit
/turf/open/floor/circuit/Initialize(mapload)
/turf/open/floor/circuit/Destroy()
/turf/open/floor/circuit/update_icon()
/turf/open/floor/circuit/off
/turf/open/floor/circuit/airless
/turf/open/floor/circuit/telecomms
/turf/open/floor/circuit/telecomms/mainframe
/turf/open/floor/circuit/telecomms/server
/turf/open/floor/circuit/green
/turf/open/floor/circuit/green/off
/turf/open/floor/circuit/green/anim
/turf/open/floor/circuit/green/airless
/turf/open/floor/circuit/green/telecomms
/turf/open/floor/circuit/green/telecomms/mainframe
/turf/open/floor/circuit/red
/turf/open/floor/circuit/red/off
/turf/open/floor/circuit/red/anim
/turf/open/floor/circuit/red/airless
/turf/open/floor/circuit/red/telecomms
/turf/open/floor/pod
/turf/open/floor/pod/light
/turf/open/floor/pod/dark
/turf/open/floor/noslip
/turf/open/floor/noslip/MakeSlippery(wet_setting, min_wet_time, wet_time_to_add, max_wet_time, permanent)
/turf/open/floor/oldshuttle
/turf/open/floor/clockwork
/turf/open/floor/clockwork/Bless() //Who needs holy blessings when you have DADDY RATVAR?
/turf/open/floor/clockwork/Initialize(mapload)
/turf/open/floor/clockwork/Destroy()
/turf/open/floor/clockwork/ReplaceWithLattice()
/turf/open/floor/clockwork/Entered(atom/movable/AM)
/turf/open/floor/clockwork/process()
/turf/open/floor/clockwork/proc/healservants()
/turf/open/floor/clockwork/try_replace_tile(obj/item/stack/tile/T, mob/user, params)
/turf/open/floor/clockwork/crowbar_act(mob/living/user, obj/item/I)
/turf/open/floor/clockwork/make_plating()
/turf/open/floor/clockwork/narsie_act()
/turf/open/floor/clockwork/reebe
/turf/open/floor/bluespace
/turf/open/floor/sepia
/turf/open/floor/bronze
/turf/open/floor/padded
/turf/open/floor/plating/rust
/turf/open/floor/plating/rust/rust_heretic_act()
/turf/open/floor/plasteel
/turf/open/floor/plasteel/examine(mob/user)
/turf/open/floor/plasteel/rust_heretic_act()
/turf/open/floor/plasteel/update_icon_state()			//sandstorm change - tile floofing
/turf/open/floor/plasteel/airless
/turf/open/floor/plasteel/telecomms
/turf/open/floor/plasteel/dark
/turf/open/floor/plasteel/dark/airless
/turf/open/floor/plasteel/dark/telecomms
/turf/open/floor/plasteel/airless/dark
/turf/open/floor/plasteel/dark/side
/turf/open/floor/plasteel/dark/corner
/turf/open/floor/plasteel/checker
/turf/open/floor/plasteel/white
/turf/open/floor/plasteel/white/side
/turf/open/floor/plasteel/white/corner
/turf/open/floor/plasteel/airless/white
/turf/open/floor/plasteel/airless/white/side
/turf/open/floor/plasteel/airless/white/corner
/turf/open/floor/plasteel/white/telecomms
/turf/open/floor/plasteel/yellowsiding
/turf/open/floor/plasteel/yellowsiding/corner
/turf/open/floor/plasteel/recharge_floor
/turf/open/floor/plasteel/recharge_floor/asteroid
/turf/open/floor/plasteel/chapel
/turf/open/floor/plasteel/chapel_floor
/turf/open/floor/plasteel/showroomfloor
/turf/open/floor/plasteel/solarpanel
/turf/open/floor/plasteel/airless/solarpanel
/turf/open/floor/plasteel/freezer
/turf/open/floor/plasteel/freezer/airless
/turf/open/floor/plasteel/grimy
/turf/open/floor/plasteel/cafeteria
/turf/open/floor/plasteel/airless/cafeteria
/turf/open/floor/plasteel/cult
/turf/open/floor/plasteel/vaporwave
/turf/open/floor/plasteel/goonplaque
/turf/open/floor/plasteel/cult/narsie_act()
/turf/open/floor/plasteel/cult/airless
/turf/open/floor/plasteel/stairs
/turf/open/floor/plasteel/stairs/left
/turf/open/floor/plasteel/stairs/medium
/turf/open/floor/plasteel/stairs/right
/turf/open/floor/plasteel/stairs/old
/turf/open/floor/plasteel/rockvault
/turf/open/floor/plasteel/rockvault/alien
/turf/open/floor/plasteel/rockvault/sandstone
/turf/open/floor/plasteel/elevatorshaft
/turf/open/floor/plasteel/bluespace
/turf/open/floor/plasteel/sepia
/* In this file:
/turf/open/floor/plating
/turf/open/floor/plating/examine(mob/user)
/turf/open/floor/plating/Initialize(mapload)
/turf/open/floor/plating/update_icon()
/turf/open/floor/plating/attackby(obj/item/C, mob/user, params)
/turf/open/floor/plating/welder_act(mob/living/user, obj/item/I)
/turf/open/floor/plating/rust_heretic_act()
/turf/open/floor/plating/make_plating()
/turf/open/floor/plating/foam
/turf/open/floor/plating/foam/burn_tile()
/turf/open/floor/plating/foam/break_tile()
/turf/open/floor/plating/foam/attackby(obj/item/I, mob/user, params)
/turf/open/floor/plating/foam/rcd_vals(mob/user, obj/item/construction/rcd/the_rcd)
/turf/open/floor/plating/foam/rcd_act(mob/user, obj/item/construction/rcd/the_rcd, passed_mode)
/turf/open/floor/plating/foam/ex_act(severity, target, origin)
/turf/open/floor/plating/foam/tool_act(mob/living/user, obj/item/I, tool_type)
/turf/open/floor/engine
/turf/open/floor/engine/examine(mob/user)
/turf/open/floor/engine/airless
/turf/open/floor/engine/break_tile()
/turf/open/floor/engine/burn_tile()
/turf/open/floor/engine/make_plating(force = 0)
/turf/open/floor/engine/try_replace_tile(obj/item/stack/tile/T, mob/user, params)
/turf/open/floor/engine/crowbar_act(mob/living/user, obj/item/I)
/turf/open/floor/engine/wrench_act(mob/living/user, obj/item/I)
/turf/open/floor/engine/acid_act(acidpwr, acid_volume)
/turf/open/floor/engine/ex_act(severity,target, origin)
/turf/open/floor/engine/singularity_pull(S, current_size)
/turf/open/floor/engine/remove_tile(mob/user, silent = FALSE, make_tile = TRUE, forced = FALSE)
/turf/open/floor/engine/attack_paw(mob/user)
/turf/open/floor/engine/on_attack_hand(mob/user, act_intent = user.a_intent, unarmed_attack_flags)
/turf/open/floor/engine/n2o
/turf/open/floor/engine/co2
/turf/open/floor/engine/plasma
/turf/open/floor/engine/o2
/turf/open/floor/engine/n2
/turf/open/floor/engine/air
/turf/open/floor/engine/cult
/turf/open/floor/engine/cult/Initialize(mapload)
/turf/open/floor/engine/cult/Destroy()
/turf/open/floor/engine/cult/ChangeTurf(path, new_baseturf, flags)
/turf/open/floor/engine/cult/proc/be_removed()
/turf/open/floor/engine/cult/ratvar_act()
/turf/open/floor/engine/cult/airless
/turf/open/floor/engine/vacuum
/**********************Asteroid**************************/
/turf/open/floor/plating/asteroid //floor piece
/turf/open/floor/plating/asteroid/Initialize(mapload)
/turf/open/floor/plating/asteroid/proc/getDug()
/turf/open/floor/plating/asteroid/proc/can_dig(mob/user)
/turf/open/floor/plating/asteroid/try_replace_tile(obj/item/stack/tile/T, mob/user, params)
/turf/open/floor/plating/asteroid/burn_tile()
/turf/open/floor/plating/asteroid/MakeSlippery(wet_setting, min_wet_time, wet_time_to_add, max_wet_time, permanent)
/turf/open/floor/plating/asteroid/MakeDry()
/turf/open/floor/plating/asteroid/attackby(obj/item/W, mob/user, params)
/turf/open/floor/plating/asteroid/ex_act(severity, target, origin)
/turf/open/floor/plating/lavaland_baseturf
/turf/open/floor/plating/asteroid/basalt
/turf/open/floor/plating/asteroid/basalt/lava //lava underneath
/turf/open/floor/plating/asteroid/basalt/airless
/turf/open/floor/plating/asteroid/basalt/Initialize(mapload)
/turf/open/floor/plating/asteroid/getDug()
/proc/set_basalt_light(turf/open/floor/B)
/turf/open/floor/plating/asteroid/basalt/lava_land_surface
/turf/open/floor/plating/asteroid/airless
/turf/open/floor/plating/asteroid/snow
/turf/open/floor/plating/asteroid/snow/burn_tile()
/turf/open/floor/plating/asteroid/snow/icemoon
/turf/open/lava/plasma/ice_moon
/turf/open/floor/plating/asteroid/snow/ice
/turf/open/floor/plating/asteroid/snow/ice/icemoon
/turf/open/floor/plating/asteroid/snow/ice/burn_tile()
/turf/open/floor/plating/asteroid/snow/airless
/turf/open/floor/plating/asteroid/snow/temperatre
/turf/open/floor/plating/asteroid/snow/atmosphere
/turf/open/floor/plating/dirt
/turf/open/floor/plating/dirt/dark
/turf/open/floor/plating/dirt/try_replace_tile(obj/item/stack/tile/T, mob/user, params)
/turf/open/floor/plating/dirt/space
/turf/open/floor/plating/dirt/space/airless
/turf/open/floor/plating/airless
/turf/open/floor/plating/icemoon
/turf/open/floor/plating/abductor
/turf/open/floor/plating/abductor/Initialize(mapload)
/turf/open/floor/plating/abductor2
/turf/open/floor/plating/abductor2/break_tile()
/turf/open/floor/plating/abductor2/burn_tile()
/turf/open/floor/plating/abductor2/try_replace_tile(obj/item/stack/tile/T, mob/user, params)
/turf/open/floor/plating/astplate
/turf/open/floor/plating/airless/astplate
/turf/open/floor/plating/ashplanet
/turf/open/floor/plating/ashplanet/Initialize(mapload)
/turf/open/floor/plating/ashplanet/try_replace_tile(obj/item/stack/tile/T, mob/user, params)
/turf/open/floor/plating/ashplanet/break_tile()
/turf/open/floor/plating/ashplanet/burn_tile()
/turf/open/floor/plating/ashplanet/ash
/turf/open/floor/plating/ashplanet/rocky
/turf/open/floor/plating/ashplanet/wateryrock
/turf/open/floor/plating/ashplanet/wateryrock/Initialize(mapload)
/turf/open/floor/plating/beach
/turf/open/floor/plating/beach/try_replace_tile(obj/item/stack/tile/T, mob/user, params)
/turf/open/floor/plating/beach/ex_act(severity, target, origin)
/turf/open/floor/plating/beach/sand
/turf/open/floor/plating/beach/coastline_t
/turf/open/floor/plating/beach/coastline_b
/turf/open/floor/plating/beach/water
/turf/open/floor/plating/beach/coastline_t/sandwater_inner
/turf/open/floor/plating/ironsand
/turf/open/floor/plating/ironsand/Initialize(mapload)
/turf/open/floor/plating/ironsand/burn_tile()
/turf/open/floor/plating/ironsand/try_replace_tile(obj/item/stack/tile/T, mob/user, params)
/turf/open/floor/plating/ice
/turf/open/floor/plating/ice/Initialize(mapload)
/turf/open/floor/plating/ice/try_replace_tile(obj/item/stack/tile/T, mob/user, params)
/turf/open/floor/plating/ice/smooth
/turf/open/floor/plating/ice/colder
/turf/open/floor/plating/ice/temperate
/turf/open/floor/plating/ice/break_tile()
/turf/open/floor/plating/ice/burn_tile()
/turf/open/floor/plating/ice/icemoon
/turf/open/floor/plating/snowed
/turf/open/floor/plating/snowed/cavern
/turf/open/floor/plating/snowed/smoothed
/turf/open/floor/plating/snowed/colder
/turf/open/floor/plating/snowed/temperatre
/turf/open/floor/plating/snowed/smoothed/icemoon
/turf/closed/wall/material
/turf/closed/wall/material/break_wall()
/turf/closed/wall/material/devastate_wall()
/turf/closed/wall/material/mat_update_desc(mat)
/turf/closed/wall/mineral
/turf/closed/wall/mineral/gold
/turf/closed/wall/mineral/silver
/turf/closed/wall/mineral/diamond
/turf/closed/wall/mineral/bananium
/turf/closed/wall/mineral/sandstone
/turf/closed/wall/mineral/uranium
/turf/closed/wall/mineral/uranium/proc/radiate()
/turf/closed/wall/mineral/uranium/on_attack_hand(mob/user, act_intent = user.a_intent, unarmed_attack_flags)
/turf/closed/wall/mineral/uranium/attackby(obj/item/W, mob/user, params)
/turf/closed/wall/mineral/uranium/Bumped(atom/movable/AM)
/turf/closed/wall/mineral/plasma
/turf/closed/wall/mineral/plasma/attackby(obj/item/W, mob/user, params)
/turf/closed/wall/mineral/plasma/proc/PlasmaBurn(temperature)
/turf/closed/wall/mineral/plasma/temperature_expose(datum/gas_mixture/air, exposed_temperature, exposed_volume)//Doesn't fucking work because walls don't interact with air :(
/turf/closed/wall/mineral/plasma/proc/ignite(exposed_temperature)
/turf/closed/wall/mineral/plasma/bullet_act(var/obj/item/projectile/Proj)
/turf/closed/wall/mineral/wood
/turf/closed/wall/mineral/wood/attackby(obj/item/W, mob/user)
/turf/closed/wall/mineral/wood/nonmetal
/turf/closed/wall/mineral/iron
/turf/closed/wall/mineral/snow
/turf/closed/wall/mineral/abductor
/turf/closed/wall/mineral/titanium //has to use this path due to how building walls works
/turf/closed/wall/mineral/titanium/nodiagonal
/turf/closed/wall/mineral/titanium/nosmooth
/turf/closed/wall/mineral/titanium/overspace
/turf/closed/wall/mineral/titanium/interior/copyTurf(turf/T)
/turf/closed/wall/mineral/titanium/copyTurf(turf/T)
/turf/closed/wall/mineral/titanium/survival
/turf/closed/wall/mineral/titanium/survival/nodiagonal
/turf/closed/wall/mineral/titanium/survival/pod
/turf/closed/wall/mineral/plastitanium
/turf/closed/wall/mineral/plastitanium/nodiagonal
/turf/closed/wall/mineral/plastitanium/nosmooth
/turf/closed/wall/mineral/plastitanium/overspace
/turf/closed/wall/mineral/plastitanium/explosive/ex_act(severity, target, origin)
/turf/closed/wall/mineral/plastitanium/interior/copyTurf(turf/T)
/turf/closed/wall/mineral/plastitanium/copyTurf(turf/T)
/turf/closed/wall/mineral/cult
/turf/closed/wall/mineral/cult/Initialize(mapload)
/turf/closed/wall/mineral/cult/devastate_wall()
/turf/closed/wall/mineral/cult/Exited(atom/movable/AM, atom/newloc)
/turf/closed/wall/mineral/cult/ratvar_act()
/turf/closed/wall/mineral/cult/artificer
/turf/closed/wall/mineral/cult/artificer/break_wall()
/turf/closed/wall/mineral/cult/artificer/devastate_wall()
/turf/closed/wall/clockwork
/turf/closed/wall/clockwork/Initialize(mapload)
/turf/closed/wall/clockwork/Destroy()
/turf/closed/wall/clockwork/rcd_vals(mob/user, obj/item/construction/rcd/the_rcd)
/turf/closed/wall/clockwork/rcd_act(mob/user, obj/item/construction/rcd/the_rcd, passed_mode)
/turf/closed/wall/clockwork/try_destroy(obj/item/I, mob/user, turf/T)
/turf/closed/wall/clockwork/ReplaceWithLattice()
/turf/closed/wall/clockwork/narsie_act()
/turf/closed/wall/clockwork/dismantle_wall(devastated=0, explode=0)
/turf/closed/wall/clockwork/devastate_wall()
/turf/closed/wall/clockwork/attack_hulk(mob/living/user, does_attack_animation = 0)
/turf/closed/wall/clockwork/mech_melee_attack(obj/vehicle/sealed/mecha/M)
/turf/closed/wall/clockwork/proc/turn_up_the_heat()
/turf/closed/wall/vault
/turf/closed/wall/ice
/turf/closed/wall/rust
/turf/closed/wall/rust/rust_heretic_act()
/turf/closed/wall/r_wall/rust
/turf/closed/wall/r_wall/rust/rust_heretic_act()
/turf/closed/wall/mineral/bronze
/turf/closed/wall/r_wall
/turf/closed/wall/r_wall/deconstruction_hints(mob/user)
/turf/closed/wall/r_wall/devastate_wall()
/turf/closed/wall/r_wall/attack_animal(mob/living/simple_animal/M)
/turf/closed/wall/r_wall/try_destroy(obj/item/I, mob/user, turf/T)
/turf/closed/wall/r_wall/try_decon(obj/item/W, mob/user, turf/T)
/turf/closed/wall/r_wall/update_icon()
/turf/closed/wall/r_wall/update_icon_state()
/turf/closed/wall/r_wall/singularity_pull(S, current_size)
/turf/closed/wall/r_wall/rcd_vals(mob/user, obj/item/construction/rcd/the_rcd)
/turf/closed/wall/r_wall/rcd_act(mob/user, obj/item/construction/rcd/the_rcd, passed_mode)
/turf/closed/wall/r_wall/rust_heretic_act()
/turf/closed/wall/r_wall/syndicate
/turf/closed/wall/r_wall/syndicate/rcd_vals(mob/user, obj/item/construction/rcd/the_rcd)
/turf/closed/wall/r_wall/syndicate/nodiagonal
/turf/closed/wall/r_wall/syndicate/nosmooth
/turf/closed/wall/r_wall/syndicate/overspace
/turf/closed/wall/r_wall/syndicate/pirate
/turf/closed/wall/r_wall/syndicate/pirate/nodiagonal
/turf/closed/wall/r_wall/syndicate/pirate/nosmooth
/turf/closed/wall/r_wall/syndicate/pirate/overspace
/turf/open/space
/turf/open/space/basic/New()	//Do not convert to Initialize
/**
/turf/open/space/Initialize(mapload)
/turf/open/space/attack_ghost(mob/dead/observer/user)
/turf/open/space/Initalize_Atmos(times_fired)
/turf/open/space/TakeTemperature(temp)
/turf/open/space/RemoveLattice()
/turf/open/space/AfterChange()
/turf/open/space/Assimilate_Air()
/turf/open/space/remove_air(amount)
/turf/open/space/remove_air_ratio(amount)
/turf/open/space/proc/update_starlight()
/turf/open/space/attack_paw(mob/user)
/turf/open/space/proc/CanBuildHere()
/turf/open/space/handle_slip()
/turf/open/space/attackby(obj/item/C, mob/user, params)
/turf/open/space/Entered(atom/movable/A)
/turf/open/space/Exited(atom/movable/AM, atom/OldLoc)
/turf/open/space/MakeSlippery(wet_setting, min_wet_time, wet_time_to_add, max_wet_time, permanent)
/turf/open/space/singularity_act()
/turf/open/space/can_have_cabling()
/turf/open/space/is_transition_turf()
/turf/open/space/acid_act(acidpwr, acid_volume)
/turf/open/space/get_smooth_underlay_icon(mutable_appearance/underlay_appearance, turf/asking_turf, adjacency_dir)
/turf/open/space/rcd_vals(mob/user, obj/item/construction/rcd/the_rcd)
/turf/open/space/rcd_act(mob/user, obj/item/construction/rcd/the_rcd, passed_mode)
/turf/open/space/ReplaceWithLattice()
/turf/open/space/get_yelling_resistance(power)
/turf/open/space/transparent
/turf/open/space/transparent/Initialize(mapload) // handle plane and layer here so that they don't cover other obs/turfs in Dream Maker
/turf/open/space/transparent/LateInitialize()
/turf/open/space/transparent/Destroy()
/turf/open/space/transparent/update_multiz(prune_on_fail = FALSE, init = FALSE)
/turf/open/space/transparent/multiz_turf_del(turf/T, dir)
/turf/open/space/transparent/multiz_turf_new(turf/T, dir)
/turf/open/space/transparent/proc/show_bottom_level()
/turf/open/space/transparent/openspace
/turf/open/space/transparent/openspace/show_bottom_level()
/turf/open/space/transparent/openspace/Initialize(mapload) // handle plane and layer here so that they don't cover other obs/turfs in Dream Maker
/turf/open/space/transparent/openspace/zAirIn()
/turf/open/space/transparent/openspace/zAirOut()
/turf/open/space/transparent/openspace/zPassIn(atom/movable/A, direction, turf/source)
/turf/open/space/transparent/openspace/zPassOut(atom/movable/A, direction, turf/destination)
/turf/open/space/transit
/turf/open/space/transit/get_smooth_underlay_icon(mutable_appearance/underlay_appearance, turf/asking_turf, adjacency_dir)
/turf/open/space/transit/south
/turf/open/space/transit/north
/turf/open/space/transit/horizontal
/turf/open/space/transit/west
/turf/open/space/transit/east
/turf/open/space/transit/border
/turf/open/space/transit/border/south
/turf/open/space/transit/border/north
/turf/open/space/transit/border/west
/turf/open/space/transit/border/east
/turf/open/space/transit/centcom
/turf/open/space/transit/centcom/Entered(atom/movable/AM, atom/OldLoc)
/turf/open/space/transit/border/Entered(atom/movable/AM, atom/OldLoc)
/turf/open/space/transit/proc/throw_atom(atom/movable/AM)
/turf/open/space/transit/CanBuildHere()
/turf/open/space/transit/Initialize(mapload)
/turf/open/space/transit/update_icon()
/turf/open/space/transit/update_icon_state()
/proc/get_transit_state(turf/T)
/proc/get_transit_angle(turf/T)
/*! Actionspeed modification datums.
/proc/get_cached_actionspeed_modifier(modtype)
/*! Used for variable slowdowns like hunger/health loss/etc, works somewhat like the old list-based modification adds. Returns the modifier datum if successful
/proc/actionspeed_data_null_check(datum/actionspeed_modifier/M)		//Determines if a data list is not meaningful and should be discarded.
/proc/message_admins(msg)
/proc/relay_msg_admins(msg)
/proc/kick_clients_in_lobby(message, kick_only_afk = 0)
/client/proc/adminGreet(logout)
/client/proc/cmd_admin_man_up(mob/M in GLOB.mob_list)
/client/proc/cmd_admin_man_up_global()
/client/proc/investigate_show()
/proc/admin_keyword_to_flag(word, previous_rights=0)
/proc/sync_ranks_with_db()
/proc/load_admin_ranks(dbfail, no_update)
/proc/load_admins(no_update)
/client/verb/changerank(newrank in GLOB.admin_ranks)
/client/verb/changerights(newrights as num)
/world/proc/AVerbsDefault()
/world/proc/AVerbsAdmin()
/world/proc/AVerbsServer()
/world/proc/AVerbsDebug()
/client/proc/add_admin_verbs()
/client/proc/remove_admin_verbs()
/client/proc/hide_most_verbs()//Allows you to keep some functionality while hiding some verbs
/client/proc/hide_verbs()
/client/proc/show_verbs()
/client/proc/admin_ghost()
/client/proc/invisimin()
/client/proc/check_antagonists()
/client/proc/unban_panel()
/client/proc/game_panel()
/client/proc/findStealthKey(txt)
/client/proc/createStealthKey()
/client/proc/stealth()
/client/proc/drop_bomb()
/client/proc/drop_wave_explosion()
/client/proc/drop_dynex_bomb()
/client/proc/get_dynex_range()
/client/proc/get_dynex_power()
/client/proc/set_dynex_scale()
/client/proc/give_spell(mob/T in GLOB.mob_list)
/client/proc/remove_spell(mob/T in GLOB.mob_list)
/client/proc/give_disease(mob/living/T in GLOB.mob_living_list)
/client/proc/object_say(obj/O in world)
/client/proc/togglebuildmodeself()
/client/proc/check_ai_laws()
/client/proc/deadmin()
/client/proc/readmin()
/client/proc/populate_world(amount = 50 as num)
/client/proc/toggle_AI_interact()
/client/proc/debugstatpanel()
/proc/cmp_antagpanel(datum/antagonist/A,datum/antagonist/B)
/proc/listtrim(list/L)
/proc/jobban_isbanned(mob/M, rank)
/proc/jobban_buildcache(client/C)
/proc/ban_unban_log_save(var/formatted_log)
/proc/randomize_human(mob/living/carbon/human/H)
/client/proc/create_poll()
/client/proc/forceEvent()
/*
/proc/admin_proc()
/proc/check_rights(rights_required, show_msg=1)
/proc/check_if_greater_rights_than(client/other)
/proc/check_rights_for(client/subject, rights_required)
/proc/GenerateToken()
/proc/RawHrefToken(forceGlobal = FALSE)
/proc/HrefToken(forceGlobal = FALSE)
/proc/HrefTokenFormField(forceGlobal = FALSE)
/proc/get_ip_intel(ip, bypasscache = FALSE, updatecache = TRUE)
/proc/ip_intel_query(ip, retryed=0)
/proc/ipintel_handle_error(error, ip, retryed)
/proc/log_ipintel(text)
/world/IsBanned(key,address,computer_id,type,real_bans_only=FALSE)
/proc/restore_stickybans()
/proc/CheckBan(ckey, id, address)
/proc/UpdateTime() //No idea why i made this a proc.
/proc/LoadBans()
/proc/ClearTempbans()
/proc/AddBan(key, computerid, reason, bannedby, temp, minutes, address)
/proc/RemoveBan(foldername)
/proc/GetExp(minutes as num)
/proc/CreateBans()
/proc/ClearAllBans()
/client/proc/open_outfit_editor(datum/outfit/target)
/client/proc/outfit_manager()
/client/proc/edit_admin_permissions()
/proc/create_message(type, target_key, admin_ckey, text, timestamp, server, secret, logged = 1, browse, expiry, note_severity)
/proc/delete_message(message_id, logged = 1, browse)
/proc/edit_message(message_id, browse)
/proc/edit_message_expiry(message_id, browse)
/proc/edit_message_severity(message_id)
/proc/toggle_message_secrecy(message_id)
/proc/browse_messages(type, target_ckey, index, linkless = FALSE, filter, agegate = FALSE)
/proc/get_message_output(type, target_ckey)
/proc/convert_notes_sql(ckey)
/*alternatively this proc can be run once to pass through every note and attempt to convert it before deleting the file, if done then AUTOCONVERT_NOTES should be turned off
/proc/mass_convert_notes()
/proc/sticky_banned_ckeys()
/proc/get_stickyban_from_ckey(ckey)
/proc/stickyban2list(ban, strictdb = TRUE)
/proc/list2stickyban(list/ban)
/client/proc/stickybanpanel()
/proc/load_whitelist()
/proc/check_whitelist(var/ckey)
/client/proc/callproc()
/client/proc/callproc_blocking(list/get_retval)
/proc/WrapAdminProcCall(datum/target, procname, list/arguments)
/world/proc/WrapAdminProcCall(datum/target, procname, list/arguments)
/proc/IsAdminAdvancedProcCall()
/client/proc/callproc_datum(datum/A as null|area|mob|obj|turf)
/client/proc/get_callproc_args()
/client/proc/get_callproc_returnval(returnval,procname)
/client/proc/DB_ban_panel()
/client/var/adminhelptimerid = 0	//a timer id for returning the ahelp verb
/client/var/datum/admin_help/current_ticket	//the current ticket the (usually) not-admin client is dealing with
/client/proc/giveadminhelpverb()
/client/proc/get_adminhelp()
/client/verb/adminhelp(msg as text)
/proc/admin_ticket_log(what, message)
/proc/get_admin_counts(requiredflags = R_BAN)
/proc/send2tgs_adminless_only(source, msg, requiredflags = R_BAN)
/**
/proc/send2otherserver(source, msg, type = "Ahelp", target_servers, list/additional_data = list())
/world/proc/send_cross_comms(server_name, list/message, auth = TRUE)
/proc/ircadminwho()
/proc/keywords_lookup(msg,irc)
/**
/proc/check_admin_pings(msg)
/client/proc/jumptoarea(area/A in GLOB.sortedAreas)
/client/proc/jumptoturf(turf/T in world)
/client/proc/jumptomob(mob/M in GLOB.mob_list)
/client/proc/jumptocoord(tx as num, ty as num, tz as num)
/client/proc/jumptokey()
/client/proc/Getmob(mob/M in GLOB.mob_list - GLOB.dummy_mob_list)
/client/proc/Getkey()
/client/proc/sendmob(mob/M in sortmobs())
/client/proc/cmd_admin_pm_context(mob/M in GLOB.mob_list)
/client/proc/cmd_admin_pm_panel()
/client/proc/cmd_ahelp_reply(whom)
/client/proc/cmd_admin_pm(whom, msg)
/client/proc/popup_admin_pm(client/recipient, msg)
/proc/IrcPm(target,msg,sender)
/proc/TgsPm(target,msg,sender)
/proc/GenTgsStealthKey()
/client/proc/cmd_admin_say(msg as text)
/client/proc/get_admin_say()
/client/proc/ak47s() // For when you just can't summon guns worthy of a firefight
/client/proc/atmosscan()
/client/proc/powerdebug()
/client/proc/bluespace_artillery(mob/M in GLOB.mob_list)
/proc/getbrokeninhands()
/client/proc/cinematic()
/client/proc/dsay(msg as text)
/client/proc/get_dead_say()
/client/proc/Debug2()
/client/proc/Cell()
/client/proc/cmd_admin_robotize(mob/M in GLOB.mob_list)
/client/proc/cmd_admin_blobize(mob/M in GLOB.mob_list)
/client/proc/cmd_admin_animalize(mob/M in GLOB.mob_list)
/client/proc/makepAI(turf/T in GLOB.mob_list)
/client/proc/cmd_admin_alienize(mob/M in GLOB.mob_list)
/client/proc/cmd_admin_slimeize(mob/M in GLOB.mob_list)
/client/proc/cmd_debug_del_all(object as text)
/client/proc/cmd_debug_make_powernets()
/client/proc/cmd_admin_grantfullaccess(mob/M in GLOB.mob_list)
/client/proc/cmd_assume_direct_control(mob/M in GLOB.mob_list)
/client/proc/cmd_give_direct_control(mob/M in GLOB.mob_list)
/client/proc/cmd_admin_test_atmos_controllers()
/client/proc/cmd_admin_areatest(on_station)
/client/proc/cmd_admin_areatest_station()
/client/proc/cmd_admin_areatest_all()
/client/proc/robust_dress_shop()
/client/proc/startSinglo()
/client/proc/cmd_debug_mob_lists()
/client/proc/cmd_display_del_log()
/client/proc/cmd_display_overlay_log()
/client/proc/cmd_display_init_log()
/client/proc/debug_huds(i as num)
/client/proc/jump_to_ruin()
/client/proc/place_ruin()
/client/proc/clear_dynamic_transit()
/client/proc/toggle_medal_disable()
/client/proc/view_runtimes()
/client/proc/pump_random_event()
/client/proc/start_line_profiling()
/client/proc/stop_line_profiling()
/client/proc/show_line_profiling()
/client/proc/reload_configuration()
/proc/show_air_status_to(turf/target, mob/user)
/client/proc/air_status(turf/target)
/client/proc/radio_report()
/client/proc/reload_admins()
/client/proc/toggle_cdn()
/client/proc/roll_dices()
/client/proc/set_server_fps()
/client/proc/getserverlogs()
/client/proc/getcurrentlogs()
/client/proc/browseserverlogs(path = "data/logs/")
/proc/show_individual_logging_panel(mob/M, source = LOGSRC_CLIENT, type = INDIVIDUAL_ATTACK_LOG)
/proc/individual_logging_panel_link(mob/M, log_type, log_src, label, selected_src, selected_type)
/proc/machine_upgrade(obj/machinery/M in world)
/client/proc/manipulate_organs(mob/living/carbon/C in world)
/client/proc/camera_view()
/client/proc/see_dirty_varedits()
/client/proc/sec_camera_report()
/client/proc/intercom_view()
/client/proc/cmd_show_at_list()
/client/proc/cmd_show_at_markers()
/client/proc/enable_debug_verbs()
/client/proc/disable_debug_verbs()
/client/proc/count_objects_on_z_level()
/client/proc/count_objects_all()
/client/proc/disable_communication()
/client/proc/create_mapping_job_icons()
/client/proc/debug_z_levels()
/client/proc/forcerandomrotate()
/client/proc/adminchangemap()
/client/proc/map_template_load()
/client/proc/map_template_upload()
/client/proc/one_click_antag()
/client/proc/only_one() //Gives everyone kilts, berets, claymores, and pinpointers, with the objective to hijack the emergency shuttle.
/client/proc/only_one_delayed()
/client/proc/panicbunker()
/client/proc/addbunkerbypass(ckeytobypass as text)
/client/proc/revokebunkerbypass(ckeytobypass as text)
/client/proc/play_sound(S as sound)
/client/proc/play_local_sound(S as sound)
/client/proc/play_web_sound()
/client/proc/manual_play_web_sound()
/client/proc/set_round_end_sound(S as sound)
/client/proc/stop_sounds()
/proc/possess(obj/O in world)
/proc/release()
/proc/givetestverbs(mob/M in GLOB.mob_list)
/proc/message_centcom(text, mob/sender)
/proc/message_syndicate(text, mob/sender)
/proc/nuke_request(text, mob/sender)
/client/proc/cmd_admin_drop_everything(mob/M in GLOB.mob_list)
/client/proc/cmd_admin_subtle_message(mob/M in GLOB.mob_list)
/client/proc/cmd_admin_mod_antag_rep(client/C in GLOB.clients, var/operation)
/client/proc/cmd_admin_world_narrate()
/client/proc/cmd_admin_direct_narrate(mob/M)
/client/proc/cmd_admin_local_narrate(atom/A)
/client/proc/cmd_admin_godmode(mob/M in GLOB.mob_list)
/proc/cmd_admin_mute(whom, mute_type, automute = 0)
/proc/create_xeno(ckey)
/*
/N */
/client/proc/respawn_character()
/client/proc/cmd_admin_add_freeform_ai_law()
/client/proc/cmd_admin_rejuvenate(mob/living/M in GLOB.mob_list)
/client/proc/cmd_admin_create_centcom_report()
/client/proc/cmd_admin_make_priority_announcement()
/client/proc/cmd_change_command_name()
/client/proc/cmd_admin_delete(atom/A as obj|mob|turf in world)
/client/proc/cmd_admin_list_open_jobs()
/client/proc/cmd_admin_explosion(atom/O as obj|mob|turf in world)
/client/proc/cmd_admin_emp(atom/O as obj|mob|turf in world)
/client/proc/cmd_admin_gib(mob/M in GLOB.mob_list)
/client/proc/cmd_admin_gib_self()
/client/proc/cmd_admin_check_contents(mob/living/M in GLOB.mob_list)
/client/proc/toggle_view_range()
/client/proc/admin_call_shuttle()
/client/proc/admin_cancel_shuttle()
/*
/client/proc/admin_disable_shuttle()
/client/proc/admin_enable_shuttle()
/client/proc/everyone_random()
/client/proc/toggle_random_events()
/client/proc/admin_enable_disk_inactive_msg()
/client/proc/admin_change_sec_level()
/client/proc/toggle_nuke(obj/machinery/nuclearbomb/N in GLOB.nuke_list)
/client/proc/create_outfits()
/client/proc/toggle_combo_hud()
/client/proc/has_antag_hud()
/client/proc/run_weather()
/client/proc/mass_zombie_infection()
/client/proc/mass_zombie_cure()
/client/proc/polymorph_all()
/client/proc/show_tip()
/client/proc/modify_goals()
/client/proc/toggle_hub()
/client/proc/cmd_admin_toggle_fov()
/client/proc/smite(mob/living/carbon/human/target as mob)
/**
/proc/firing_squad(mob/living/carbon/target, turf/source_turf, body_zone, wound_bonus, damage)
/client/proc/punish_log(var/whom, var/punishment)
/client/proc/trigger_centcom_recall()
/client/proc/cmd_admin_check_player_exp()	//Allows admins to determine who the newer players are.
/*
/client/proc/spawn_floor_cluwne()
/client/proc/reestablish_db_connection()
/client/proc/secrets() //Creates a verb for admins to open up the ui
/proc/portalAnnounce(announcement, playlightning)
/proc/doPortalSpawn(turf/loc, mobtype, numtospawn, portal_appearance, players, humanoutfit)
/client/proc/cmd_select_equipment(mob/target in GLOB.mob_list)
/*
/**
/client/proc/admin_apply_outfit(mob/target, dresscode)
/client/proc/triple_ai()
/*
/client/proc/SDQL2_query(query_text as message)
/world/proc/SDQL2_query(query_text, log_entry1, log_entry2)
/proc/recursive_list_print(list/output = list(), list/input, datum/callback/datum_handler, datum/callback/atom_handler)
/**
/proc/SDQL_parse(list/query_list)
/proc/SDQL_testout(list/query_tree, indent = 0)
/world/proc/SDQL_var(object, list/expression, start = 1, source, superuser, datum/SDQL2_query/query)
/proc/SDQL2_tokenize(query_text)
/proc/_abs(A)
/proc/_animate(atom/A, list/data, time = 10, loop = 1, easing = LINEAR_EASING, flags = null)
/proc/_animate_adv(atom/A, list/data, loop = 1, easing = LINEAR_EASING, flags = NONE)
/proc/_acrccos(A)
/proc/_arcsin(A)
/proc/_ascii2text(A)
/proc/_block(Start, End)
/proc/_ckey(Key)
/proc/_ckeyEx(Key)
/proc/_copytext(T, Start = 1, End = 0)
/proc/_cos(X)
/proc/_get_dir(Loc1, Loc2)
/proc/_get_dist(Loc1, Loc2)
/proc/_get_step(Ref, Dir)
/proc/_hearers(Depth = world.view, Center = usr)
/proc/_image(icon, loc, icon_state, layer, dir)
/proc/_istype(object, type)
/proc/_ispath(path, type)
/proc/_length(E)
/proc/_link(thing, url)
/proc/_locate(X, Y, Z)
/proc/_log(X, Y)
/proc/_lowertext(T)
/proc/_matrix(a, b, c, d, e, f)
/proc/_max(...)
/proc/_md5(T)
/proc/_min(...)
/proc/_new(type, arguments)
/proc/_num2text(N, SigFig = 6)
/proc/_ohearers(Dist, Center = usr)
/proc/_orange(Dist, Center = usr)
/proc/_output(thing, msg, control)
/proc/_oview(Dist, Center = usr)
/proc/_oviewers(Dist, Center = usr)
/proc/_params2list(Params)
/proc/_pick(...)
/proc/_prob(P)
/proc/_rand(L = 0, H = 1)
/proc/_range(Dist, Center = usr)
/proc/_regex(pattern, flags)
/proc/_REGEX_QUOTE(text)
/proc/_REGEX_QUOTE_REPLACEMENT(text)
/proc/_replacetext(Haystack, Needle, Replacement, Start = 1,End = 0)
/proc/_replacetextEx(Haystack, Needle, Replacement, Start = 1,End = 0)
/proc/_rgb(R, G, B)
/proc/_rgba(R, G, B, A)
/proc/_roll(dice)
/proc/_round(A, B = 1)
/proc/_sin(X)
/proc/_list_add(list/L, ...)
/proc/_list_copy(list/L, Start = 1, End = 0)
/proc/_list_cut(list/L, Start = 1, End = 0)
/proc/_list_find(list/L, Elem, Start = 1, End = 0)
/proc/_list_insert(list/L, Index, Item)
/proc/_list_join(list/L, Glue, Start = 0, End = 1)
/proc/_list_remove(list/L, ...)
/proc/_list_set(list/L, key, value)
/proc/_list_numerical_add(L, key, num)
/proc/_list_swap(list/L, Index1, Index2)
/proc/_list_get(list/L, index)
/proc/_walk(ref, dir, lag)
/proc/_walk_towards(ref, trg, lag)
/proc/_walk_to(ref, trg, min, lag)
/proc/_walk_away(ref, trg, max, lag)
/proc/_walk_rand(ref, lag)
/proc/_step(ref, dir)
/proc/_step_rand(ref)
/proc/_step_to(ref, trg, min)
/proc/_step_towards(ref, trg)
/proc/_step_away(ref, trg, max)
/proc/_instantiate_at(thing, location)
/proc/_turf_in_offset(s = usr, x = 0, y = 0, z = 0)
/proc/_random_turf_in_range(s = usr, r = 7)
/proc/_random_turf_in_view(s = usr, r = 7)
/proc/__nan()
/**
/client/proc/admin_delete(datum/D)
/proc/debug_variable(name, value, level, datum/D, sanitize = TRUE)			//if D is a list, name will be index, and value will be assoc value.
/client/proc/vv_get_class(var_name, var_value)
/client/proc/vv_get_value(class, default_class, current_value, list/restricted_classes, list/extra_classes, list/classes, var_name)
/client/proc/mark_datum(datum/D)
/client/proc/mark_datum_mapview(datum/D in world)
/client/proc/cmd_mass_modify_object_variables(atom/A, var_name)
/client/proc/massmodify_variables(datum/O, var_name = "", method = 0)
/proc/get_all_of_type(T, subtypes = TRUE)
/client/proc/vv_parse_text(O, new_var)
/client/proc/vv_subtype_prompt(type)
/client/proc/vv_reference_list(type, subtypes)
/client/proc/mod_list_add_ass(atom/O) //hehe
/client/proc/mod_list_add(list/L, atom/O, original_name, objectvar)
/client/proc/mod_list(list/L, atom/O, original_name, objectvar, index, autodetect_class = FALSE)
/proc/vv_varname_lockcheck(param_var_name)
/client/proc/modify_variables(atom/O, param_var_name = null, autodetect_class = 0)
/world/proc/enable_reference_tracking()
/proc/get_back_references(datum/D)
/proc/get_forward_references(datum/D)
/proc/clear_references(datum/D)
/proc/qdel_and_find_ref_if_fail(datum/thing_to_del, force = FALSE)
/client/proc/view_var_Topic(href, href_list, hsrc)
/client/proc/vv_do_basic(datum/target, href_list)
/client/proc/vv_do_list(list/target, href_list)
/client/proc/debug_variables(datum/D in world)
/client/proc/vv_update_display(datum/D, span, content)
/*
/proc/get_abductor_console(team_number)
/**
/**
/**
/*
/*
/*
/*
/*
/*
/*
/*/datum/antagonist/vassal/roundend_report_header()
/*
/*
/*	if(user.mind.has_antag_datum(ANTAG_DATUM_VASSAL)
/*	if(user.mind.has_antag_datum(ANTAG_DATUM_VASSAL)
/*
/* Doesnt work
/* Doesnt work
/*/datum/action/bloodsucker/masquerade/CheckCanUse(display_error)
/proc/brainwash(mob/living/L, directives)
/*
/*
/*
/***************************************\
/***************************************\
/***************************************\
/***************************************\
/***************************************\
/***************************************\
/**
/**
/proc/load_reebe()
/*
/*
/proc/get_component_span(id)
/proc/get_component_color_bright(id)
/proc/get_component_color(id)
/turf/closed/wall/fabrication_vals(mob/living/user, obj/item/clockwork/replica_fabricator/fabricator, silent) //four sheets of metal
/turf/closed/wall/mineral/fabrication_vals(mob/living/user, obj/item/clockwork/replica_fabricator/fabricator, silent) //two sheets of metal
/turf/closed/wall/mineral/iron/fabrication_vals(mob/living/user, obj/item/clockwork/replica_fabricator/fabricator, silent) //two sheets of metal, five rods
/turf/closed/wall/mineral/cult/fabrication_vals(mob/living/user, obj/item/clockwork/replica_fabricator/fabricator, silent) //no metal
/turf/closed/wall/r_wall/fabrication_vals(mob/living/user, obj/item/clockwork/replica_fabricator/fabricator, silent)
/turf/closed/wall/clockwork/fabrication_vals(mob/living/user, obj/item/clockwork/replica_fabricator/fabricator, silent)
/turf/open/floor/fabrication_vals(mob/living/user, obj/item/clockwork/replica_fabricator/fabricator, silent)
/turf/open/floor/plating/asteroid/fabrication_vals(mob/living/user, obj/item/clockwork/replica_fabricator/fabricator, silent)
/turf/open/floor/plating/ashplanet/fabrication_vals(mob/living/user, obj/item/clockwork/replica_fabricator/fabricator, silent)
/turf/open/lava/fabrication_vals(mob/living/user, obj/item/clockwork/replica_fabricator/fabricator, silent)
/turf/open/floor/clockwork/fabrication_vals(mob/living/user, obj/item/clockwork/replica_fabricator/fabricator, silent)
/proc/hierophant_message(message, servantsonly, atom/target)
/proc/titled_hierophant_message(mob/user, message, name_span = "heavy_brass", message_span = "brass", user_title = "Servant")
/proc/get_clockwork_power(amount) //If no amount is provided, returns the clockwork power; otherwise, returns if there's enough power for that amount.
/proc/adjust_clockwork_power(amount) //Adjusts the global clockwork power by this amount (min 0.)
/proc/can_access_clockwork_power(atom/movable/access_point, amount) //Returns true if the access point has access to clockwork power (and optionally, a number of watts for it)
/*
/proc/text2ratvar(text) //Takes english and applies ratvarian styling rules (and rot13) to it.
/proc/add_ratvarian_regex(text)
/proc/ratvar2text(ratvarian) //Reverts ravarian styling and rot13 in text.
/proc/remove_ratvarian_regex(ratvarian)
/proc/clockwork_say(atom/movable/AM, message, whisper=FALSE)
/proc/scripture_unlock_check()
/proc/scripture_unlock_alert(list/previous_states)
/proc/update_slab_info(obj/item/clockwork/slab/set_slab)
/proc/generate_all_scripture()
/proc/change_construction_value(amount)
/proc/can_recite_scripture(mob/living/L, can_potentially)
/*//this module was commented out so why wasn't this?
/*
/*
/proc/get_eminence()
/*
/*//commenting this out until its reworked to actually do random teleports
/proc/clockwork_ark_active() //A helper proc so the Ark doesn't have to be typecast every time it's checked; returns null if there is no Ark and its active var otherwise
/proc/clockcult_ending_helper()
/proc/pollCultists(var/mob/living/Nominee,datum/team/cult/team) //Cult Master Poll
/proc/reset_blood_target(datum/team/cult/team)
/*
/*
/*
/proc/hudFix(mob/living/carbon/human/target)
/proc/devilInfo(name)
/proc/randomDevilName()
/proc/randomdevilobligation()
/proc/randomdevilban()
/proc/randomdevilbane()
/proc/randomdevilbanish()
/*
/*******************BASE SYMPTOM TYPES*******************/
/******MILD******/
/******MEDIUM******/
/******POWERFUL******/
/****HEALING SUBTYPE****/
/*
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/proc/KillEveryoneOnZLevel(z)
/*
/*
/proc/RevenantThrow(over, mob/user, obj/item/throwable)
/proc/is_ninja(mob/living/M)
/**
/**
/**
/turf/closed/indestructible/swarmer_act()
/turf/open/floor/swarmer_act()//ex_act() on turf calls it on its contents, this is to prevent attacking mobs by DisIntegrate()'ing the floor
/turf/open/lava/swarmer_act()
/turf/closed/wall/swarmer_act(mob/living/simple_animal/hostile/swarmer/actor)
/proc/get_random_traitor_kind(list/blacklist = list())
/proc/is_internal_objective(datum/objective/O)
/proc/makeNewConstruct(mob/living/simple_animal/hostile/construct/ctype, mob/target, mob/stoner = null, cultoverride = 0, loc_override = null)
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/proc/get_antag_minds(antag_type,specific = FALSE)
/proc/set_antag_hud(mob/M, new_icon_state)
/*
/*
/***************************IBeam*********************************/
/client/proc/asset_cache_confirm_arrival(job_id)
/client/proc/asset_cache_preload_data(data)
/client/proc/asset_cache_update_json()
/client/proc/browse_queue_flush(timeout = 50)
/**
/proc/get_asset_datum(type)
/**
/**
/proc/sanitize_css_class_name(name)
/turf/proc/hotspot_expose(exposed_temperature, exposed_volume, soh = 0)
/turf/open/hotspot_expose(exposed_temperature, exposed_volume, soh)
/turf/CanAtmosPass = ATMOS_PASS_NO
/turf/CanAtmosPassVertical = ATMOS_PASS_NO
/turf/open/CanAtmosPass = ATMOS_PASS_PROC
/turf/open/CanAtmosPassVertical = ATMOS_PASS_PROC
/turf/open/CanAtmosPass(turf/T, vertical = FALSE)
/turf/proc/ImmediateCalculateAdjacentTurfs()
/turf/proc/set_sleeping(should_sleep)
/turf/proc/__update_auxtools_turf_adjacency_info()
/turf/proc/GetAtmosAdjacentTurfs(alldir = 0)
/turf/air_update_turf(command = 0)
/turf/open/atmos_spawn_air(text)
/turf
/turf/open
/turf/open/Initialize(mapload)
/turf/open/Destroy()
/turf/proc/update_air_ref()
/turf/open/assume_air(datum/gas_mixture/giver) //use this for machines to adjust air
/turf/open/assume_air_moles(datum/gas_mixture/giver, moles)
/turf/open/assume_air_ratio(datum/gas_mixture/giver, ratio)
/turf/open/transfer_air(datum/gas_mixture/taker, moles)
/turf/open/transfer_air_ratio(datum/gas_mixture/taker, ratio)
/turf/open/remove_air(amount)
/turf/open/remove_air_ratio(ratio)
/turf/open/proc/copy_air_with_tile(turf/open/T)
/turf/open/proc/copy_air(datum/gas_mixture/copy)
/turf/return_air()
/turf/open/return_air()
/turf/temperature_expose()
/turf/open/proc/eg_reset_cooldowns()
/turf/open/proc/eg_garbage_collect()
/turf/open/proc/get_excited()
/turf/open/proc/set_excited()
/turf/open/proc/update_visuals()
/turf/open/proc/set_visuals(list/new_overlay_types)
/proc/typecache_of_gases_with_no_overlays()
/*#define LAST_SHARE_CHECK \
/turf/proc/process_cell(fire_count)
/turf/open/proc/equalize_pressure_in_zone(cyclenum)
/turf/open/proc/consider_firelocks(turf/T2)
/turf/proc/handle_decompression_floor_rip()
/turf/open/floor/handle_decompression_floor_rip(sum)
/turf/open/process_cell(fire_count)
/turf/proc/consider_pressure_difference()
/turf/open/consider_pressure_difference(turf/T, difference)
/turf/open/proc/high_pressure_movements()
/proc/_auxtools_register_gas(datum/gas/gas) // makes sure auxtools knows stuff about this gas
/proc/finalize_gas_refs()
/proc/auxtools_atmos_init()
/*
/proc/gas_types()
/proc/equalize_all_gases_in_list(list/L)
/*
/*
/*
/*
/proc/release_gas_to(datum/gas_mixture/input_air, datum/gas_mixture/output_air, target_pressure)
/proc/init_gas_reactions()
/proc/cmp_gas_reaction(datum/gas_reaction/a, datum/gas_reaction/b) // compares lists of reactions by the maximum priority contained within the list
/proc/fire_expose(turf/open/location, datum/gas_mixture/air, temperature)
/proc/radiation_burn(turf/open/location, rad_power)
/proc/fusion_ball(datum/holder, reaction_energy, instability)
/*
/*
/*
/proc/toggle_all_ctf(mob/user)
/proc/is_ctf_target(atom/target)
/**
/* Can a gateway link to this destination right now. */
/* Returns user-friendly description why you can't connect to this destination, displayed in UI */
/* Check if the movable is allowed to arrive at this destination (exile implants mostly) */
/* Get the actual turf we'll arrive at */
/* Called after moving the movable to target turf */
/* Called when gateway activates with this destination. */
/* Called when gateway targeting this destination deactivates. */
/* Returns data used by gateway controller ui */
/* Destination is another gateway */
/* We set the target gateway target to activator gateway */
/* We turn off the target gateway if it's linked with us */
/* Special home destination, so we can check exile implants */
/* Destination is one ore more turfs - created by landmarks */
/* Dense invisible object starting the teleportation. Created by gateways on activation. */
/* Station's primary gateway */
/* Doesn't need control console or power, always links to home when interacting. */
/* Gateway control computer */
/*An alternative to exit gateways, signposts send you back to somewhere safe onstation with their semiotic magic.*/
/proc/createRandomZlevel(name = AWAY_MISSION_NAME, list/traits = list(ZTRAIT_AWAY = TRUE), list/potential_levels = GLOB.potential_away_levels)
/proc/generateMapList(filename)
/*Cabin areas*/
/*Cabin's forest. Removed in the new cabin map since it was buggy and I prefer manual placement.*/
/turf/open/water/jungle
/turf/open/floor/plating/dirt/jungle
/turf/open/floor/plating/dirt/dark/jungle
/turf/closed/mineral/random/labormineral/jungle
/turf/open/floor/plasteel/dark/snowdin
/turf/open/lava/plasma
/turf/open/lava/plasma/attackby(obj/item/I, mob/user, params)
/turf/open/lava/plasma/do_burn(atom/movable/burn_target, delta_time = 1)
/* Station-Collision(sc) away mission map specific stuff
/*
/*
/*
/*
/*
/* Code for the Wild West map by Brotemis
/*
/proc/togglebuildmode(mob/M as mob in GLOB.player_list)
/proc/bounty_ship_item_and_contents(atom/movable/AM, dry_run=FALSE)
/proc/try_add_bounty(datum/bounty/new_bounty)
/proc/random_bounty(var/guided = 0)
/proc/setup_bounties()
/proc/completed_bounty_count()
/client/proc/centcom_podlauncher() //Creates a verb for admins to open up the ui
/* How it works:
/* The rule in figuring out item export cost:
/proc/export_item_and_contents(atom/movable/AM, allowed_categories = EXPORT_CARGO, apply_elastic = TRUE, delete_unsold = TRUE, dry_run=FALSE, datum/export_report/external_report)
/proc/setupExports()
/* commented out until someone wants to port the actual boots
/*
/* I don't like that you can just buy a box of monkey cubes and finish this for -half- of them.
/* If anyone wants to try and fix/work, go for it
/proc/chatter(message, phomeme, atom/A)
/proc/chatter_speak_word(loc, phomeme, length)
/proc/chatter_get_sleep_multiplier(phomeme)
/*
/*
/*
/*
/*
/client
/client/Topic(href, href_list, hsrc)
/client/proc/handle_statpanel_click(list/href_list)
/client/proc/is_content_unlocked()
/*
/client/proc/handle_spam_prevention(message, mute_type)
/client/AllowUpload(filename, filelength)
/client/New(TopicData)
/client/Del()
/client/Destroy()
/client/proc/set_client_age_from_db(connectiontopic)
/client/proc/findJoinDate()
/client/proc/validate_key_in_db()
/client/proc/check_randomizer(topic)
/client/proc/cid_check_reconnect()
/client/proc/note_randomizer_user()
/client/proc/add_system_note(system_ckey, message)
/client/proc/check_ip_intel()
/client/Click(atom/object, atom/location, control, params, ignore_spam = FALSE, extra_info)
/client/proc/add_verbs_from_config()
/client/proc/is_afk(duration = CONFIG_GET(number/inactivity_period))
/client/proc/send_resources()
/client/proc/setDir(newdir)
/client/vv_edit_var(var_name, var_value)
/client/vv_get_var(var_name)
/client/proc/rescale_view(change, min, max)
/client/proc/change_view(new_size)
/client/proc/AnnouncePR(announcement)
/client/proc/show_character_previews(mutable_appearance/source)
/client/proc/clear_character_previews()
/client/proc/can_have_part(part_name)
/client/proc/give_award(achievement_type, mob/user, value = 1)
/client/proc/get_award_status(achievement_type, mob/user, value = 1)
/client/proc/award_heart(heart_reason)
/client/proc/init_verbs()
/client/proc/check_panel_loaded()
/client/proc/increment_progress(key, amount)
/client/proc/open_filter_editor(atom/in_atom)
/client/proc/IsVPN()
/proc/addclientmessage(var/ckey, var/message)
/proc/log_played_names(ckey, ...)
/*
/client/verb/savefile_export(path as text)
/client/verb/savefile_import(path as text)
/client/proc/pick_form()
/client/proc/pick_ghost_orbit()
/client/proc/pick_ghost_accs()
/client/verb/pick_ghost_customization()
/client/verb/pick_ghost_others()
/client/verb/toggle_intent_style()
/client/verb/toggle_ghost_hud_pref()
/client/verb/toggle_inquisition() // warning: unexpected inquisition
/client/proc/toggleadminhelpsound()
/client/proc/toggleannouncelogin()
/client/proc/toggle_hear_radio()
/client/proc/deadchat()
/client/proc/toggleprayers()
/client/verb/aooc(msg as text)
/client/proc/set_aooc(newColor as color)
/client/proc/reset_aooc()
/proc/toggle_aooc(toggle = null)
/client/verb/bunker_auto_authorize()
/world/proc/send_cross_server_bunker_overrides(key, client/C)
/client/verb/toggle_tips()
/client/verb/change_tip_delay()
/client/verb/toggle_hover_outline()
/client/verb/looc(msg as text)
/client/verb/show_station_minimap()
/client/verb/ooc(msg as text)
/proc/toggle_ooc(toggle = null)
/proc/toggle_looc(toggle = null)
/proc/toggle_dooc(toggle = null)
/client/proc/set_ooc()
/client/proc/reset_ooc()
/client/verb/colorooc() //this is admin and people who bought byond.
/client/verb/resetcolorooc()
/client/verb/admin_notice()
/client/verb/motd()
/client/proc/self_notes()
/client/proc/self_playtime()
/client/proc/ignore_key(client)
/client/verb/select_ignore()
/client/proc/show_previous_roundend_report()
/client/proc/show_servers_last_roundend_report()
/client/verb/fit_viewport()
/client/verb/fix_stat_panel()
/client/verb/update_ping(time as num)
/client/proc/pingfromtime(time)
/client/verb/display_ping(time as num)
/client/verb/ping()
/*/client/verb/who() Commenting this file out to be overridden in modular_citadel
/client/verb/adminwho()
/*
/**
/**
/**
/*
/proc/generate_alpha_masked_clothing(index,state,icon,female,alpha_masks)
/* /obj/item/clothing/gloves/ring
/*
/*
/*
/*
/*
/*
/**
/* /datum/outfit/chrono_agent //Begone skyrat change on sandstorm
/proc/collect_vv(obj/item/I)
/**
/**
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/**
/*
/*
/*
/*
/*
/*
/proc/get_timestamp()
/**
/**
/**
/**
/proc/emoji_parse(text) //turns :ai: into an emoji in text.
/proc/emoji_sanitize(text) //cuts any text that would not be parsed as an emoji
/world/Error(exception/E, datum/e_src)
/proc/create_event_devil(spawn_loc)
/proc/create_devil_mind(key)
/proc/gather_false_events(players_amt, gamemode)
/*
/proc/generate_ion_law()
/proc/generateMeteorString(start_when,syndiealert,direction)
/proc/send_pirate_threat()
/proc/pirates_answered(datum/comm_message/threat_msg, payoff, ship_name, initial_send_time, response_max_time, ship_template)
/proc/spawn_pirates(datum/comm_message/threat_msg, ship_template, skip_answer_check)
/proc/isvineimmune(atom/A)
/proc/create_space_ninja(spawn_loc)
/**
/*
/**
/proc/forge_valentines_objective(mob/living/lover,mob/living/date,var/chemLove = FALSE)
/proc/make_field(field_type, list/field_params, override_checks = FALSE, start_field = TRUE)
/proc/is_turf_in_field(turf/T, datum/proximity_monitor/advanced/F)	//Looking for ways to optimize this!
/*		if("nutrition")
/** # Snacks
/*
/*******************
/*
/*
/*
/proc/force_enable_halloween_species()
/proc/DuplicateObject(atom/original, perfectcopy = TRUE, sameloc = FALSE, atom/newloc = null, nerf = FALSE, holoitem=FALSE)
/*
/*
/*
/*
/turf/open/floor/holofloor
/turf/open/floor/holofloor/attackby(obj/item/I, mob/living/user)
/turf/open/floor/holofloor/tool_act(mob/living/user, obj/item/I, tool_type)
/turf/open/floor/holofloor/burn_tile()
/turf/open/floor/holofloor/break_tile()
/turf/open/floor/holofloor/plating
/turf/open/floor/holofloor/plating/burnmix
/turf/open/floor/holofloor/grass
/turf/open/floor/holofloor/beach
/turf/open/floor/holofloor/beach/coast_t
/turf/open/floor/holofloor/beach/coast_b
/turf/open/floor/holofloor/beach/water
/turf/open/floor/holofloor/asteroid
/turf/open/floor/holofloor/asteroid/Initialize(mapload)
/turf/open/floor/holofloor/basalt
/turf/open/floor/holofloor/basalt/Initialize(mapload)
/turf/open/floor/holofloor/space
/turf/open/floor/holofloor/space/Initialize(mapload)
/turf/open/floor/holofloor/hyperspace
/turf/open/floor/holofloor/hyperspace/Initialize(mapload)
/turf/open/floor/holofloor/hyperspace/ns/Initialize(mapload)
/turf/open/floor/holofloor/carpet
/turf/open/floor/holofloor/carpet/Initialize(mapload)
/turf/open/floor/holofloor/carpet/update_icon()
/turf/open/floor/holofloor/wood
/turf/open/floor/holofloor/snow
/turf/open/floor/holofloor/snow/on_attack_hand(mob/living/user, act_intent = user.a_intent, unarmed_attack_flags)
/turf/open/floor/holofloor/snow/cold
/turf/open/floor/holofloor/asteroid
/turf/open/floor/holofloor/ice
/turf/open/floor/holofloor/ice/smooth
/turf/open/floor/holofloor/ice/Initialize(mapload)
/**
/*
/**
/**
/proc/check_plants_growth_stages_icons()
/**
/proc/seedify(obj/item/O, t_max, obj/machinery/seed_extractor/extractor, mob/living/user)
/**
/** Add Seeds Proc.
/*
/*
/proc/path_to_instrument_ids(path)
/proc/get_allowed_instrument_ids()
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/proc/XorEncrypt(string, key)
/*
/*
/proc/get_centcom_access(job)
/proc/get_all_accesses()
/proc/get_all_centcom_access()
/proc/get_ert_access(class)
/proc/get_all_syndicate_access()
/proc/get_region_accesses(code)
/proc/get_region_accesses_name(code)
/proc/get_access_desc(A)
/proc/get_centcom_access_desc(A)
/proc/get_all_jobs()
/proc/get_all_job_icons() //For all existing HUD icons
/proc/get_all_centcom_jobs()
/proc/GetJobName(jobName)
/proc/guest_jobbans(job)
/proc/get_department_heads(var/job_title)
/proc/get_full_job_name(job)
/proc/job_is_xp_locked(jobtitle)
/client/proc/calc_exp_type(exptype)
/client/proc/get_exp_report()
/client/proc/get_exp_living(pure_numeric = FALSE)
/proc/get_exp_format(expnum)
/client/proc/set_exp_from_db()
/client/proc/update_flag_db(newflag, state = FALSE)
/client/proc/update_exp_list(minutes, announce_changes = FALSE)
/client/proc/set_db_player_flags()
/*
/**
/**
/**
/**
/client/verb/keyDown(_key as text)
/client/proc/ForceAllKeysUp()
/client/verb/keyUp(_key as text)
/client/keyLoop()
/client/verb/fix_macros()
/client/proc/erase_all_macros(datum/preferences/prefs_override = prefs)
/client/proc/apply_macro_set(name, list/macroset)
/client/proc/set_hotkeys_preference(datum/preferences/prefs_override = prefs)
/client/proc/ensure_keys_set(datum/preferences/prefs_override = prefs)
/client/proc/full_macro_assert(datum/preferences/prefs_override = prefs)
/client/proc/do_full_macro_assert(datum/preferences/prefs_override = prefs)
/proc/keybind_modifier_permutation(key, alt = FALSE, ctrl = FALSE, shift = FALSE, self = TRUE)
/proc/do_keybind_modifier_permutations(key, list/permutations = list(), list/out = list())
/**
/client/proc/update_special_keybinds(datum/preferences/direct_prefs)
/*
/*
/*!Language holders will either exist in an atom/movable or a mind. Creation of language holders happens
/* Library Items
/*
/*
/*
/* Library Machines
/*
/*
/*
/*
/*
/proc/create_random_books(amount, location, fail_loud = FALSE, category = null, obj/item/book/existing_book)
/* Persistent engraved messages, etched onto the station turfs to serve
/proc/good_chisel_message_location(turf/T)
/**
/turf/flash_lighting_fx(_range = FLASH_LIGHT_RANGE, _power = FLASH_LIGHT_POWER, _color = LIGHT_COLOR_WHITE, _duration = FLASH_LIGHT_DURATION, _reset_lighting = TRUE)
/*
/proc/create_all_lighting_objects()
/turf
/turf/proc/reconsider_lights()
/turf/proc/lighting_clear_overlay()
/turf/proc/lighting_build_overlay()
/turf/proc/get_lumcount(var/minlum = 0, var/maxlum = 1)
/turf/proc/is_softly_lit()
/turf/proc/recalc_atom_opacity()
/turf/Exited(atom/movable/Obj, atom/newloc)
/turf/proc/change_area(var/area/old_area, var/area/new_area)
/turf/proc/generate_missing_corners()
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/proc/assoc_value_sum(list/L)
/**
/**
/**
/**
/**
/**
/proc/create_mafia_game()
/**
/**
/proc/convert_map_to_tgm(list/map,\
/proc/sort_map(list/map, minx, miny, maxx, maxy)
/proc/generate_tgm_metadata(atom/O, list/vars_to_save = list("pixel_x", "pixel_y", "dir", "name", "req_access", "req_access_txt", "piping_layer", "color", "icon_state", "pipe_color", "amount"))
/proc/calculate_tgm_header_index(index, layers)
/proc/load_map_config(filename = "data/next_map.json", default_to_box, delete_after, error_if_missing = TRUE)
/**
/proc/load_new_z_level(file, name, orientation, list/ztraits)
/world/proc/preloader_setup(list/the_attributes, path, turn_angle, swap_x, swap_y, swap_xy)
/world/proc/preloader_load(atom/what)
/turf/template_noop
/*
/proc/load_map(
/**
/proc/seedRuins(list/z_levels = null, budget = 0, whitelist = list(/area/space), list/potentialRuins)
/* Automatically places pipes on init based on any pipes connecting to it and adjacent helpers. Only supports cardinals.
/proc/get_step_multiz(ref, dir)
/proc/get_multiz_accessible_levels(center_z)
/proc/get_dir_multiz(turf/us, turf/them)
/turf/proc/above()
/turf/proc/below()
/**********************Mineral processing unit console**************************/
/**
/**********************Mineral processing unit**************************/
/**********************Ore Redemption Unit**************************/
/**********************Mineral stacking unit console**************************/
/**********************Mineral stacking unit**************************/
/**********************Unloading unit**************************/
/**********************Mining Equipment Vendor**************************/
/****************Golem Point Vendor**************************/
/**********************Mining Equipment Vendor Items**************************/
/**********************Mining Equipment Voucher**********************/
/**********************Mining Point Card**********************/
/**********************Mining drone**********************/
/**********************Minebot Upgrades**********************/
/**********************Light************************/
/**********************Miner Lockers**************************/
/**********************Shuttle Computer**************************/
/**********************Mining car (Crate like thing, not the rail car)**************************/
/*****************************Money bag********************************/
/**********************Mineral ores**************************/
/*****************************Coin********************************/
/**********************Ore box**************************/
/****************Explorer's Suit and Mask****************/
/****************HEVA Suit and Mask****************/
/****************Exo-Suit and Mask****************/
/**********************Goliath Hide**********************/
/*********************Mining Hammer****************/
/**********************Lazarus Injector**********************/
/*****************Marker Beacons**************************/
/**********************Mining Scanners**********************/
/proc/mineral_scan_pulse(turf/T, range = world.view)
/*****************Pickaxes & Drills & Shovels****************/
/*********************Hivelord stabilizer****************/
/************************Hivelord core*******************/
/*
/*************************Legion core********************/
/**********************Resonator**********************/
/*****************************Survival Pod********************************/
/**********************Mining Equipment Vendor Items**************************/
/**********************Facehugger toy**********************/
/**********************Jaunter**********************/
/**********************Prisoners' Console**************************/
/proc/cmp_sheet_list(list/a, list/b)
/**********************Prisoner Collection Unit**************************/
/**********************Point Lookup Console**************************/
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/proc/all_innate_ability_typepaths()
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/proc/_paci_check(mob/new_mob, mob/old_mob)
/**
/proc/faction_check(list/faction_A, list/faction_B, exact_match)
/**
/proc/check_zone(zone)
/proc/ran_zone(zone, probability = 80)
/proc/above_neck(zone)
/**
/proc/stars(phrase, probability = 25)
/**
/proc/slur(phrase, strength = 50)
/proc/cultslur(phrase) // Inflicted on victims of a stun talisman
/proc/stutter(phrase)
/proc/derpspeech(message, stuttering)
/proc/Gibberish(text, replace_characters = FALSE, chance = 50)
/*
/proc/ninjaspeak(phrase) //NINJACODE
/proc/shake_camera(mob/M, duration, strength=1)
/proc/directional_recoil(mob/M, strength=1, angle = 0)
/proc/findname(msg)
/proc/is_blind(A)
/proc/is_special_character(mob/M) // returns 1 for special characters and 2 for heroes of gamemode //moved out of admins.dm because things other than admin procs were calling this.
/proc/notify_ghosts(message, ghost_sound, enter_link, atom/source, mutable_appearance/alert_overlay, action = NOTIFY_JUMP, flashwindow = TRUE, ignore_mapload = TRUE, ignore_key, ignore_dnr_observers = FALSE, header) //Easy notification of ghosts.
/proc/item_heal_robotic(mob/living/carbon/human/H, mob/user, brute_heal, burn_heal)
/proc/IsAdminGhost(var/mob/user)
/proc/offer_control(mob/M,ignore_category=null)
/proc/bloodtype_to_color(var/type)
/client/verb/drop_item()
/client/proc/Move_object(direction)
/client/Move(n, direction)
/client/proc/Process_Grab()
/client/proc/Process_Incorpmove(direction)
/client/proc/check_has_body_select()
/client/verb/body_toggle_head()
/client/verb/body_r_arm()
/client/verb/body_chest()
/client/verb/body_l_arm()
/client/verb/body_r_leg()
/client/verb/body_groin()
/client/verb/body_l_leg()
/client/verb/toggle_walk_run()
/proc/uncostumize_say(input, message_mode)
/*=============================================================
/proc/get_top_level_mob(mob/S)
/**
/**
/**
/**
/**
/**
/* Certain mob types have problems and should not be allowed to be controlled by players.
/**
/**
/proc/get_job_unavailable_error_message(retval, jobtitle)
/*	Used to make sure that a player has a valid job preference setup, used to knock players out of eligibility for anything if their prefs don't make sense.
/**
/**
/******************************************
/******************************************
/******************************************
/******************************************
/******************************************
/******************************************
/******************************************
/******************************************
/******************************************
/******************************************
/******************************************
/******************************************
/************* Lizard compatable snoots ***********
/******************************************
/******************************************
/******************************************
/******************************************
/******************************************
/*
/proc/init_sprite_accessory_subtypes(prototype, list/L, list/male, list/female, roundstart = FALSE, skip_prototype = TRUE)//Roundstart argument builds a specific list for roundstart parts where some parts may be locked
/*
/*
/*
/*
/proc/updateallghostimages()
/* So long, Mafia mode, disabled for now
/*
/proc/set_observer_default_invisibility(amount, message=null)
/**
/client/proc/admin_cmd_respawn_return_to_lobby()
/**
/client/proc/admin_cmd_remove_ghost_respawn_timer()
/**
/**
/**
/**
/**
/****************************************************
/****************************************************
/proc/get_safe_blood(bloodtype)
/**
/**
/**
/**
/*
/*CIT CHANGE - comments out lay_down proc to be modified in modular_citadel
/*!
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/** The actual proc for block checks. DO NOT USE THIS DIRECTLY UNLESS YOU HAVE VERY GOOD REASON TO. To reduce copypaste for differences between handling for real attacks and virtual checks.
/**
/proc/block_calculate_resultant_damage(damage, list/block_return)
/proc/return_block_parry_datum(datum/block_parry_data/type_id_datum)
/proc/set_block_parry_datum(id, datum/block_parry_data/data)
/**
/**
/**
/**
/**
/**
/**
/**
/**
/** adjustOrganLoss
/** setOrganLoss
/** getOrganLoss
/**
/**
/*
/*
/*----------------------------------------
/*----------------------------------------
/*Code for aliens attacking aliens. Because aliens act on a hivemind, I don't see them as very aggressive with each other.
/* CIT CHANGE - removes xeno stun immunity
/*NOTES:
/*Alien spit now works like a taser shot. It won't home in on the target but will act the same once it does hit.
/proc/get_alien_type(var/alienpath)
/*----------------------------------------
/*----------------------------------------
/proc/CanHug(mob/living/M)
/proc/generate_or_wait_for_human_dummy(slotkey)
/proc/generate_dummy_lookalike(slotkey, mob/target)
/proc/unset_busy_human_dummy(slotkey)
/proc/clear_human_dummy(slotkey)
/**
/*
/proc/get_strippable_alternate_action_internals(obj/item/item, atom/source)
/proc/strippable_alternate_action_internals(obj/item/item, atom/source, mob/user)
/**
/**
/**
/proc/generate_selectable_species(clear = FALSE)
/**
/**
/**
/**
/**
/*
/* TODO: Snowflake trail marks
/*	switch(H.nutrition)
/**
/* Keep these comments up-to-date if you -insist- on hurting my code-baby ;_;
/* --------------------------------------- */
/* --------------------------------------- */
/proc/wear_alpha_masked_version(state, icon, layer, female, alpha_mask)
/*
/*
/proc/dwarf_name() //hello caller: my name is urist mcuristurister
/proc/mass_purrbation()
/proc/mass_remove_purrbation()
/proc/purrbation_toggle(mob/living/carbon/human/H, silent = FALSE)
/proc/purrbation_apply(mob/living/carbon/human/H, silent = FALSE)
/proc/purrbation_remove(mob/living/carbon/human/H, silent = FALSE)
/*
/proc/islinked(mob/living/silicon/robot/bot, mob/living/silicon/ai/ai)
/proc/AutoUpdateAI(obj/subject)
/turf/open/ai_visible
/proc/play_vox_word(word, z_level, mob/only_listener, voxType = "female")
/client/proc/AIMove(n, direct, mob/living/silicon/ai/user)
/*
/*
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/*	var/obj/item/borg_chameleon/chameleon = locate() in src
/* /obj/item/robot_module/proc/add_module(obj/item/I, nonstandard, requires_rebuild)
/**
/*
/**
/* Parrots!
/*
/*
/*
/*
/*
/*
/*
/**
/*
/*
/**
/**
/**
/*
/*
/proc/_alert_drones(msg, dead_can_hear = 0, atom/source, mob/living/faction_checked_mob, exact_faction_match)
/**
/**
/**
/**
/*
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/*
/**
/**
/**
/**
/**
/**
/*
/*
/*
/*
/*
/*
/proc/dragon_fire_line(source, list/turfs)
/*
/*
/*
/proc/GetUncappedAISwarmerType()
/proc/GetTotalAISwarmerCap()
/*
/**
/*Basic setup for elite attacks, based on Whoneedspace's megafauna attack setup.
/**
/**
/**
/**
/**
/**
/**
/proc/setup_mod_themes()
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/*! Movespeed modification datums.
/**
/proc/get_cached_movespeed_modifier(modtype)
/*! Used for variable slowdowns like hunger/health loss/etc, works somewhat like the old list-based modification adds. Returns the modifier datum if successful
/**
/proc/movespeed_data_null_check(datum/movespeed_modifier/M)		//Determines if a data list is not meaningful and should be discarded.
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/* For employment contracts and infernal contracts */
/* Filing cabinets!
/*
/*
/*
/*
/**
/**
/**
/**
/**
/**
/*
/* Pens!
/*
/*
/*
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/*
/proc/load_photo_from_disk(id, location)
/proc/load_picture_from_disk(id)
/proc/log_path_from_picture_ID(id)
/*
/*
/*
/*
/code/datums/components/plumbing/plumbing.dm
/code/datums/ductnet.dm
/**Basic plumbing object.
/turf/open/pool
/turf/open/pool/Initialize(mapload)
/turf/open/pool/Destroy()
/turf/open/pool/update_icon()
/turf/open/MouseDrop_T(atom/from, mob/living/user)
/turf/open/pool/Exit(atom/movable/AM, atom/newloc)
/turf/open/pool/Exited(atom/A, atom/newLoc)
/turf/open/pool/Entered(atom/movable/AM, atom/oldloc)
/turf/open/pool/MouseDrop_T(atom/from, mob/user)
/turf/open/pool/attackby(obj/item/W, mob/living/user)
/turf/open/pool/on_attack_hand(mob/living/user, act_intent = user.a_intent, unarmed_attack_flags)
/**
/**
/*Power module, used for APC construction*/
/* Cable directions (d1 and d2)
/* Cell variants*/
/proc/power_list(turf/T, source, d, unmarked=0, cable_only = 0)
/proc/propagate_network(obj/O, datum/powernet/PN)
/proc/merge_powernets(datum/powernet/net1, datum/powernet/net2)
/proc/electrocute_mob(mob/living/M, power_source, obj/source, siemens_coeff = 1, dist_check = FALSE)
/turf/proc/get_cable_node()
/proc/cardinalrange(var/center)
/**
/*
/proc/ending_helper()
/proc/cult_ending_helper(var/no_explosion = 0)
/*Composed of 7 parts :
/proc/tesla_zap(atom/source, zap_range = 3, power, zap_flags = ZAP_DEFAULT_FLAGS, list/shocked_targets)
/client/proc/debugNatureMapGenerator()
/*
/turf/open/floor/plasteel/shuttle/red/syndicate
/**
/*
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/proc/calculate_projectile_angle_and_pixel_offsets(mob/user, params)
/proc/is_energy_reflectable_projectile(atom/A)
/*
/*
/* 3d printer 'pseudo guns' for borgs */
/proc/wabbajack(mob/living/M)
/proc/chem_splash(turf/epicenter, affected_range = 3, list/datum/reagents/reactants = list(), extra_heat = 0, threatscale = 1, adminlog = 1)
/proc/find_reagent(input)
/client/proc/generate_wikichem_list()
/proc/generate_chemwiki_line(datum/reagent/R, X, processCR)
/proc/generate_chemreactwiki_line(datum/chemical_reaction/CR)
/proc/mix_color_from_reagents(list/reagent_list)
/proc/build_chemical_reagent_list()
/proc/build_chemical_reactions_list()
/proc/recipe_search(mob/M, list/reaction_list)
/**
/*
/proc/get_random_reagent_id()	// Returns a random reagent type minus blacklisted reagents
/proc/get_chem_id(chem_name)
/proc/build_name2reagent()
/**
/proc/pretty_string_from_reagent_list(list/reagent_list)
/proc/translate_legacy_chem_id(id)
/*
/*
/*
/*
/*
/proc/build_reagents_to_food()
/*
/*
/*
/***************************************************************
/*
/*
/*
/proc/CallMaterialName(ID)
/proc/fix_noid_research_servers()
/*Power cells are in code\modules\power\cell.dm
/proc/cmp_rped_sort(obj/item/A, obj/item/B)
/**
/**
/**
/**
/**
/**
/*
/* moved to modular_sand
/*
/**
/**
/proc/count_unique_techweb_nodes()
/proc/count_unique_techweb_designs()
/proc/node_boost_error(id, message)
/proc/techweb_item_boost_check(obj/item/I)			//Returns an associative list of techweb node datums with values of the boost it gives.	var/list/returned = list()
/proc/techweb_item_point_check(obj/item/I)
/proc/techweb_point_display_generic(pointlist)
/proc/techweb_point_display_rdconsole(pointlist, last_pointlist)
/*
/proc/total_techweb_points()
/proc/total_techweb_points_printout()
/turf/open/ShiftClick(mob/user)
/turf/open/CtrlClick(mob/user)
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*==========================================*\
/**
/turf/open/water/cursed_spring
/turf/open/water/cursed_spring/Entered(atom/movable/thing, atom/oldLoc)
/**
/turf/open/water/cursed_spring/proc/remove_from_cursed(datum/mind/M)
/turf/open/floor/plating/asteroid/basalt/wasteland //Like a more fun version of living in Arizona.
/turf/open/floor/plating/asteroid/basalt/wasteland/Initialize(mapload)
/turf/closed/mineral/strong/wasteland
/turf/closed/mineral/strong/wasteland/drop_ores()
/proc/cmp_xy_desc(atom/movable/A,atom/movable/B)
/proc/puzzle_imprison(mob/living/prisoner)
/turf/closed/indestructible/hotelwall
/turf/open/indestructible/hotelwood
/turf/open/indestructible/hoteltile
/turf/open/space/bluespace
/turf/open/space/bluespace/Entered(atom/movable/A)
/turf/closed/indestructible/hoteldoor
/turf/closed/indestructible/hoteldoor/proc/promptExit(mob/living/user)
/turf/closed/indestructible/hoteldoor/attack_ghost(mob/dead/observer/user)
/turf/closed/indestructible/hoteldoor/attack_tk(mob/user)
/turf/closed/indestructible/hoteldoor/on_attack_hand(mob/user, act_intent = user.a_intent, unarmed_attack_flags)
/turf/closed/indestructible/hoteldoor/attack_animal(mob/user)
/turf/closed/indestructible/hoteldoor/attack_paw(mob/user)
/turf/closed/indestructible/hoteldoor/attack_hulk(mob/living/carbon/human/user, does_attack_animation)
/turf/closed/indestructible/hoteldoor/attack_larva(mob/user)
/turf/closed/indestructible/hoteldoor/attack_slime(mob/user)
/turf/closed/indestructible/hoteldoor/attack_robot(mob/user)
/turf/closed/indestructible/hoteldoor/AltClick(mob/user)
/turf/closed/indestructible/hoteldoor/check_eye(mob/user)
/proc/make_maint_all_access()
/proc/revoke_maint_all_access()
/proc/toggle_bluespace_artillery()
/proc/set_security_level(level)
/**
/proc/hull_shielding_get_tiles_around_area(area/instance, check_tick = FALSE)
/**
/proc/hull_shielding_get_tiles_in_z(zlevel, check_tick = FALSE, recurse = FALSE, list/outlist = list(), list/scanned_zlevels = list())
/**
/*
/************************************Base procs************************************/
/turf/proc/fromShuttleMove(turf/newT, move_mode)
/turf/proc/toShuttleMove(turf/oldT, move_mode, obj/docking_port/mobile/shuttle)
/turf/proc/onShuttleMove(turf/newT, list/movement_force, move_dir)
/turf/proc/afterShuttleMove(turf/oldT, rotation)
/turf/proc/lateShuttleMove(turf/oldT)
/************************************Turf move procs************************************/
/************************************Area move procs************************************/
/************************************Machinery move procs************************************/
/************************************Item move procs************************************/
/************************************Mob move procs************************************/
/************************************Structure move procs************************************/
/************************************Misc move procs************************************/
/**
/*
/************************************Base proc************************************/
/************************************Turf rotate procs************************************/
/turf/closed/mineral/shuttleRotate(rotation, params)
/************************************Mob rotate procs************************************/
/************************************Structure rotate procs************************************/
/************************************Machine rotate procs************************************/
/*
/**
/proc/curse_of_madness(mob/user, message)
/proc/give_madness(mob/living/carbon/human/H, message)
/proc/give_guns(mob/living/carbon/human/H)
/proc/give_magic(mob/living/carbon/human/H)
/proc/rightandwrong(summon_type, mob/user, survivor_probability)
/proc/summonevents()
/**
/**
/**
/*
/***************************BRUTE***************************/
/********************BRUTE STEPS********************/
/***************************BURN***************************/
/********************BURN STEPS********************/
/***************************COMBO***************************/
/********************COMBO STEPS********************/
/proc/attempt_initiate_surgery(obj/item/I, mob/living/M, mob/user)
/proc/attempt_cancel_surgery(datum/surgery/S, obj/item/I, mob/living/M, mob/user)
/proc/get_location_modifier(mob/M)
/proc/get_location_accessible(mob/M, location)
/*
/***************************STEPS***************************/
/**
/**
/**
/**
/**
/**
/**
/**
/** check_damage_thresholds
/proc/voice_of_god(message, mob/living/user, list/span_list, base_multiplier = 1, include_speaker = FALSE, message_admins = TRUE)
/proc/get_vog_multiplier(mob/living/carbon/user, base_multiplier = 1, list/specific_listeners = list())
/proc/get_vog_special(mob/living/carbon/user)
/proc/velvetspeech(message, mob/living/user, base_multiplier = 1, message_admins = FALSE, debug = FALSE)
/*Uncomment if you want to make the game automatic
/**
/proc/message_to_html(message)
/*!
/**
/proc/to_chat_immediate(
/**
/proc/to_chat(
/world/TgsNew(datum/tgs_event_handler/event_handler, minimum_required_security_level = TGS_SECURITY_ULTRASAFE)
/world/TgsMaximumApiVersion()
/world/TgsMinimumApiVersion()
/world/TgsInitializationComplete()
/world/proc/TgsTopic(T)
/world/TgsRevision()
/world/TgsReboot()
/world/TgsAvailable()
/world/TgsVersion()
/world/TgsApiVersion()
/world/TgsInstanceName()
/world/TgsTestMerges()
/world/TgsEndProcess()
/world/TgsChatChannelInfo()
/world/TgsChatBroadcast(message, list/channels)
/world/TgsTargetedChatBroadcast(message, admin_only)
/world/TgsChatPrivateMessage(message, datum/tgs_chat_user/user)
/world/TgsSecurityLevel()
/*!
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/client/var/list/tgui_windows = list()
/**
/client/var/tgui_cache_reloaded = FALSE
/**
/**
/client/verb/uiclose(window_id as text)
/**
/proc/tgui_Topic(href_list)
/*!
/**
/**
/**
/**
/proc/default_ui_state(mob/user, atom/source)
/proc/ui_status_user_is_adjacent(mob/user, atom/source)
/proc/ui_status_only_living(mob/user, source)
/proc/ui_status_user_is_abled(mob/user, atom/source)
/proc/ui_status_user_has_free_hands(mob/user, atom/source)
/proc/ui_status_user_is_advanced_tool_user(mob/user)
/proc/ui_status_silicon_has_access(mob/user, atom/source)
/proc/ui_status_user_is_conscious_and_lying_down(mob/user)
/proc/ui_status_user_strictly_adjacent(mob/user, atom/target)
/*!
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/*!
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/*!
/**
/*!
/**
/*!
/**
/*!
/**
/*!
/**
/*!
/**
/*!
/**
/*!
/**
/*!
/**
/*!
/**
/*!
/**
/*!
/**
/**
/*!
/**
/*!
/**
/**
/*!
/**
/*!
/**
/**
/*!
/**
/*!
/**
/**
/proc/tgui_alert(mob/user, message = "", title, list/buttons = list("Ok"), timeout = 0, autofocus = TRUE, strict_byond = FALSE)
/**
/**
/**
/proc/tgui_alert_async(mob/user, message = "", title, list/buttons = list("Ok"), datum/callback/callback, timeout = 0, autofocus = TRUE)
/**
/**
/proc/tgui_input_list(mob/user, message, title = "Select", list/items, default, timeout = 0, strict_modern = FALSE)
/**
/**
/**
/proc/tgui_input_list_async(mob/user, message, title, list/items, default, datum/callback/callback, timeout = 60 SECONDS)
/**
/**
/proc/tgui_input_number(mob/user, message, title = "Number Input", default = 0, max_value = INFINITY, min_value = -INFINITY, timeout = 0, round_value = FALSE)
/**
/**
/**
/proc/tgui_input_number_async(mob/user, message, title, default, datum/callback/callback, timeout = 60 SECONDS, round_value = FALSE)
/**
/**
/proc/tgui_input_text(mob/user, message = "", title = "Text Input", default, max_length = INFINITY, multiline = FALSE, encode = FALSE, timeout = 0, prevent_enter = FALSE)
/**
/**
/**
/proc/tgui_input_text_async(mob/user, message, title, default, datum/callback/callback, max_length, multiline, encode, timeout = 60 SECONDS)
/**
/*!
/client/var/admin_music_volume = 1
/**
/**
/*!
/client/var/datum/tgui_panel/tgui_panel
/**
/client/verb/fix_tgui_panel()
/client/proc/nuke_chat()
/*!
/**
/**
/**
/**
/*!
/**
/**
/**
/**
/**
/**
/*
/* TG SPECIFIC CODE */
/proc/openToolTip(mob/user = null, atom/movable/tip_src = null, params = null,title = "",content = "",theme = "")
/proc/closeToolTip(mob/user)
/**
/client/MouseDown(object, location, control, params)
/**
/*
/*
/proc/focused_tests()
/proc/cmp_unit_test_priority(datum/unit_test/a, datum/unit_test/b)
/*
/proc/RunUnitTest(test_path, list/test_results)
/*
/proc/RunUnitTests()
/proc/get_uplink_items(uplink_flag, allow_sales = TRUE, allow_restricted = TRUE)
/proc/create_uplink_sales(num, category_name, limited_stock, sale_items, uplink_items)
/**
/*
/*
/*
/*
/*
/*
/*
/* for now
/*
/*
/*
/*
/*
/*
/**
/***************** MECHA ACTIONS *****************/
/**
/**
/**
/turf/open/floor/mech_bay_recharge_floor               //        Whos idea it was
/turf/open/floor/mech_bay_recharge_floor/break_tile()
/turf/open/floor/mech_bay_recharge_floor/airless
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/turf/closed/wall/mech_melee_attack(obj/vehicle/sealed/mecha/mecha_attacker)
/***************** WELCOME TO MECHA.DM, ENJOY YOUR STAY *****************/
/**
/**Checks if defense mode is enabled, and if the attacker is standing in an area covered by the shield.
/**An object to take the hit for us when using the Durand's defense mode.
/**
/turf/proc/drill_act(obj/item/mecha_parts/mecha_equipment/drill/drill, mob/user)
/turf/closed/wall/drill_act(obj/item/mecha_parts/mecha_equipment/drill/drill, mob/user)
/turf/closed/wall/r_wall/drill_act(obj/item/mecha_parts/mecha_equipment/drill/drill, mob/user)
/turf/closed/mineral/drill_act(obj/item/mecha_parts/mecha_equipment/drill/drill, mob/user)
/turf/open/floor/plating/asteroid/drill_act(obj/item/mecha_parts/mecha_equipment/drill/drill)
/**
/**
/*
/*
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/hook/client_new
/hook/mob_new
/hook/living_new
/hook/carbon_new
/hook/human_new
/hook/simple_animal_new
/hook/living_attackby
/hook/mob_new/proc/chain_hooks(mob/M)
/*
/*
/*
/proc/object_to_json(var/atom/movable/thing)
/proc/json_to_object(var/json_data, var/loc)
/proc/list_to_object(var/list/data, var/loc)
/*
/proc/attempt_vr(callon, procname, list/args=null)
/*
/proc/hook_vr(hook, list/args=null)
/hook/living_new/proc/vore_setup(mob/living/M)
/proc/has_vore_belly(var/mob/living/O)
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/proc/generate_circuit_datatypes()
/**
/**
/**
/**
/**
/**
/**
/**
/client/proc/load_circuit()
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/proc/try_to_zombie_infect(mob/living/carbon/human/target)
/proc/generate_bitfields()
/*
/proc/generate_trait_name_map()
/proc/resolve_ai_icon(input, radial_preview = FALSE)
/* List of sortType codes for mapping reference
/proc/generate_number_strings()
/proc/init_keybindings()
/proc/add_keybinding(datum/keybinding/instance)
/proc/init_emote_keybinds()
/proc/update_config_movespeed_type_lookup(update_mobs = TRUE)
/proc/update_mob_config_movespeeds()
/*
/proc/init_poll_ignore()
/**
/proc/single_path_typecache_immutable(path)
/*
/proc/send_byjax(receiver, control_id, target_element, new_content=null, callback=null, list/callback_args=null)
/*
/*
/turf/Adjacent(atom/neighbor, atom/target = null, atom/movable/mover = null)
/*
/*
/turf/proc/ClickCross(target_dir, border_only, target_atom = null, atom/movable/mover = null)
/*
/*
/*
/*
/* Questions: Instead of an Emag check on every function, can we not add to airlocks onclick if emag return? */
/* Atom Procs */
/* Airlocks */
/* APC */
/* AI Turrets */
/* Holopads */
/*
/**
/*
/turf/IsObscured()
/turf/AllowClick()
/proc/CheckToolReach(atom/movable/here, atom/movable/there, reach)
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/* MouseWheelOn */
/*
/*
/*
/client/MouseDown(datum/object, location, control, params)
/client/MouseUp(object, location, control, params)
/client/MouseMove(object,location,control,params)
/client/MouseDrag(src_object,atom/over_object,src_location,over_location,src_control,over_control,params)
/**
/**
/**
/**
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/proc/tkMaxRangeCheck(mob/user, atom/target)
/* Proc to create or update an alert. Returns the alert if the alert is new or updated, 0 if it was thrown already
/*
/**
/client/proc/RollCredits()
/client/proc/ClearCredits()
/*
/proc/ui_style2icon(ui_style)
/**
/**
/**
/**
/**
/client/proc/register_map_obj(atom/movable/screen/screen_obj)
/**
/client/proc/clear_map(map_name)
/**
/client/proc/clear_all_maps()
/**
/client/proc/create_popup(name, ratiox = 100, ratioy = 100)
/**
/client/proc/setup_popup(popup_name, width = 9, height = 9, \
/**
/client/proc/close_popup(popup)
/**
/client/verb/handle_popup_close(window_id as text)
/client/proc/test_movable_UI()
/client/proc/test_snap_UI()
/*!
/**
/*
/proc/show_radial_menu(mob/user, atom/anchor, list/choices, uniqueid, radius, datum/callback/custom_check, require_near = FALSE, tooltips = FALSE, no_repeat_close = FALSE)
/*
/*
/proc/show_radial_menu_persistent(mob/user, atom/anchor, list/choices, datum/callback/select_proc, uniqueid, radius, tooltips = FALSE)
/*
/*
/proc/ui_hand_position(i) //values based on old hand ui positions (CENTER:-/+16,SOUTH:5)
/proc/ui_equip_position(mob/M)
/proc/ui_swaphand_position(mob/M, which = 1) //values based on old swaphand ui positions (CENTER: +/-16,SOUTH+1:5)
/**
/**
/**
/**
/* HUD DATUMS */
/*
/* DATA HUD DATUMS */
/* MED/SEC/DIAG HUD HOOKS */
/*
/***********************************************
/proc/RoundHealth(mob/living/M)
/***********************************************
/***********************************************
/proc/RoundDiagBar(value)
/*~~~~~~~~~~~~~~~~~~~~
/*~~~~~~~~~
/*~~~~~~~~~~~~
/*~~~~~~~~~~~~
/*
/**
/client/proc/update_clickcatcher(list/view_override)
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/client/proc/CreateParallax()
/**
/*ALL DEFINES RELATED TO COMBAT GO HERE*/
/**
/*ALL DEFINES RELATED TO CONSTRUCTION, CONSTRUCTING THINGS, OR CONSTRUCTED OBJECTS GO HERE*/
/*
/*
/*
/*
/*ALL DNA, SPECIES, AND GENETICS-RELATED DEFINES GO HERE*/
/*
/*ALL DEFINES RELATED TO INVENTORY OBJECTS, MANAGEMENT, ETC, GO HERE*/
/* the names of the customization tabs
/*
/proc/Gcd(a, b)
/proc/SolveQuadratic(a, b, c)
/proc/closer_angle_difference(a, b)
/proc/gaussian(mean, stddev)
/proc/get_turf_in_angle(angle, turf/starting, increments)
/proc/get_overlap(x1, y1, x2, y2, x3, y3, x4, y4)
/** subsystem does not fire. */
/** Subsystem only runs on spare cpu (after all non-background subsystems have ran that tick) */
/** Treat wait as a tick count, not DS, run every wait ticks. */
/** keep the subsystem's timing on point by firing early if it fired late last fire because of lag */
/** Calculate its next fire after its fired. */
/* eg:
/*
/*ALL MOB-RELATED DEFINES THAT DON'T BELONG IN ANOTHER FILE GO HERE*/
/*see __DEFINES/inventory.dm for bodypart bitflag defines*/
/*
/procpath
/** If REFERENCE_TRACKING is enabled, qdel will call this object's find_references() verb.
/*
/*ALL DEFINES FOR AIS, CYBORGS, AND SIMPLE ANIMAL BOTS*/
/* This comment bypasses grep checks */ /var/__rust_g
/proc/__detect_rust_g()
/proc/rustg_get_version() return call(RUST_G, "get_version")()
/**
/**
/**
/**
/**
/**
/proc/rustg_log_close_all() return call(RUST_G, "log_close_all")()
/proc/rustg_redis_disconnect() return call(RUST_G, "redis_disconnect")()
/proc/rustg_redis_get_messages() return call(RUST_G, "redis_get_messages")()
/proc/rustg_read_toml_file(path)
/**
/*
/proc/enable_debugging()
/*
/**
/**
/**
/**
/**
/**
/**
/world/proc/TgsNew(datum/tgs_event_handler/event_handler, minimum_required_security_level = TGS_SECURITY_ULTRASAFE)
/**
/world/proc/TgsInitializationComplete()
/**
/world/proc/TgsReboot()
/**
/**
/**
/**
/world/proc/TgsMaximumApiVersion()
/world/proc/TgsMinimumApiVersion()
/**
/world/proc/TgsAvailable()
/**
/world/proc/TgsEndProcess()
/**
/world/proc/TgsTargetedChatBroadcast(datum/tgs_message_content/message, admin_only = FALSE)
/**
/world/proc/TgsChatPrivateMessage(datum/tgs_message_content/message, datum/tgs_chat_user/user)
/**
/world/proc/TgsChatBroadcast(datum/tgs_message_content/message, list/channels = null)
/world/proc/TgsVersion()
/world/proc/TgsApiVersion()
/world/proc/TgsInstanceName()
/world/proc/TgsRevision()
/world/proc/TgsSecurityLevel()
/world/proc/TgsTestMerges()
/world/proc/TgsChatChannelInfo()
/*
/*
/**
/* // removing sizeplay again
/proc/__detect_auxmos()
/*
/**
/* These ones aren't a direct colour like the ones above, because nothing would fit */
/**
/*******Component Specific Signals*******/
/**
/*
/*
/proc/get_projectile_angle(atom/source, atom/target)
/proc/Get_Angle(atom/movable/start,atom/movable/end)//For beams.
/proc/Get_Pixel_Angle(var/y, var/x)//for getting the angle when animating something's pixel_x and pixel_y
/proc/repopulate_sorted_areas()
/proc/get_area_instance_from_text(areatext)
/proc/get_areas(areatype, subtypes=TRUE)
/proc/get_area_turfs(areatype, target_z = 0, subtypes=FALSE)
/proc/detect_room(turf/origin, list/break_if_found, max_size=INFINITY)
/proc/create_area(mob/creator)
/**
/proc/get_base_area(atom/target)
/**
/proc/get_sub_areas(atom/target, include_base = TRUE)
/**
/proc/get_sub_areas_turfs(area/A, target_z = 0, include_base = TRUE)
/**
/proc/get_sub_areas_contents(area/A, include_base = TRUE)
/*
/**
/proc/send2chat(message, channel_tag)
/**
/proc/send2adminchat(category, message, embed_links = FALSE)
/proc/is_guest_key(key)
/proc/cmp_numeric_dsc(a,b)
/proc/cmp_numeric_asc(a,b)
/proc/cmp_text_asc(a,b)
/proc/cmp_text_dsc(a,b)
/proc/cmp_name_asc(atom/a, atom/b)
/proc/cmp_name_dsc(atom/a, atom/b)
/proc/cmp_records_asc(datum/data/record/a, datum/data/record/b)
/proc/cmp_records_dsc(datum/data/record/a, datum/data/record/b)
/proc/cmp_filter_data_priority(list/A, list/B)
/proc/cmp_ckey_asc(client/a, client/b)
/proc/cmp_ckey_dsc(client/a, client/b)
/proc/cmp_subsystem_init(datum/controller/subsystem/a, datum/controller/subsystem/b)
/proc/cmp_subsystem_display(datum/controller/subsystem/a, datum/controller/subsystem/b)
/proc/cmp_subsystem_priority(datum/controller/subsystem/a, datum/controller/subsystem/b)
/proc/cmp_timer(datum/timedevent/a, datum/timedevent/b)
/proc/cmp_clientcolour_priority(datum/client_colour/A, datum/client_colour/B)
/proc/cmp_clockscripture_priority(datum/clockwork_scripture/A, datum/clockwork_scripture/B)
/proc/cmp_ruincost_priority(datum/map_template/ruin/A, datum/map_template/ruin/B)
/proc/cmp_qdel_item_time(datum/qdel_item/A, datum/qdel_item/B)
/proc/cmp_generic_stat_item_time(list/A, list/B)
/proc/cmp_profile_avg_time_dsc(list/A, list/B)
/proc/cmp_profile_time_dsc(list/A, list/B)
/proc/cmp_profile_count_dsc(list/A, list/B)
/proc/cmp_atom_layer_asc(atom/A,atom/B)
/proc/cmp_advdisease_resistance_asc(datum/disease/advance/A, datum/disease/advance/B)
/proc/cmp_uplink_items_dsc(datum/uplink_item/A, datum/uplink_item/B)
/proc/cmp_numbered_displays_name_asc(datum/numbered_display/A, datum/numbered_display/B)
/proc/cmp_numbered_displays_name_dsc(datum/numbered_display/A, datum/numbered_display/B)
/proc/cmp_quirk_asc(datum/quirk/A, datum/quirk/B)
/proc/cmp_item_block_priority_asc(obj/item/A, obj/item/B)
/proc/cmp_skill_categories(datum/skill/A, datum/skill/B)
/proc/cmp_chemical_reactions_default(datum/chemical_reaction/A, datum/chemical_reaction/B)
/proc/cmp_mob_realname_dsc(mob/A,mob/B)
/proc/cmp_job_display_asc(datum/job/A, datum/job/B)
/proc/cmp_reagents_asc(datum/reagent/a, datum/reagent/b)
/proc/cmp_typepaths_asc(A, B)
/proc/cmp_playtime(list/A, list/B)
/proc/get_policy(keyword)
/proc/generate_custom_holoform_from_prefs(datum/preferences/prefs, list/equipment_by_slot, list/inhand_equipment, copy_job = FALSE, apply_loadout = FALSE)
/proc/process_holoform_icon_filter(icon/I, filter_type, clone = TRUE)
/proc/user_interface_custom_holoform(client/C)
/proc/generate_custom_holoform_from_prefs_safe(datum/preferences/prefs, mob/user)
/proc/IsLeapYear(y)
/proc/EasterDate(y)
/*
/proc/is_donator_group(ckey, group)
/proc/regenerate_donator_grouping_list()
/**
/proc/do_after_advanced(atom/user, delay, atom/target, do_after_flags, datum/callback/extra_checks, required_mobility_flags, required_combat_flags, mob/living/mob_redirect, obj/item/tool)
/proc/do_mob(mob/user , mob/target, time = 30, uninterruptible = 0, progress = 1, datum/callback/extra_checks = null, ignorehelditem = FALSE, resume_time = 0 SECONDS)
/proc/do_after(mob/user, var/delay, needhand = 1, atom/target = null, progress = 1, datum/callback/extra_checks = null, required_mobility_flags = (MOBILITY_USE|MOBILITY_MOVE), resume_time = 0 SECONDS)
/proc/do_after_mob(mob/user, var/list/targets, time = 30, uninterruptible = 0, progress = 1, datum/callback/extra_checks)
/client/proc/getFiles()
/client/proc/browse_files(root="data/logs/", max_iterations=10, list/valid_extensions=list("txt","log","htm", "html", "md", "json"))
/*	This proc is a failsafe to prevent spamming of file requests.
/client/proc/file_spam_check()
/proc/pathwalk(path)
/proc/pathflatten(path)
/proc/md5filepath(path)
/proc/md5asfile(file)
/proc/alpha_mask_filter(x, y, icon/icon, render_source, flags)
/proc/angular_blur_filter(x, y, size)
/proc/color_matrix_filter(matrix/in_matrix, space)
/proc/displacement_map_filter(icon, render_source, x, y, size = 32)
/proc/drop_shadow_filter(x, y, size, offset, color)
/proc/gauss_blur_filter(size)
/proc/layering_filter(icon, render_source, x, y, flags, color, transform, blend_mode)
/proc/motion_blur_filter(x, y)
/proc/outline_filter(size, color, flags)
/proc/radial_blur_filter(size, x, y)
/proc/rays_filter(size, color, offset, density, threshold, factor, x, y, flags)
/proc/ripple_filter(radius, size, falloff, repeat, x, y, flags)
/proc/wave_filter(x, y, size, offset, flags)
/proc/apply_wibbly_filters(atom/in_atom, length)
/proc/remove_wibbly_filters(atom/in_atom)
/proc/get_area_name(atom/X, format_text = FALSE, get_base_area = FALSE)
/proc/get_areas_in_range(dist=0, atom/center=usr)
/proc/get_adjacent_areas(atom/center)
/proc/get_open_turf_in_dir(atom/center, dir)
/proc/get_adjacent_open_turfs(atom/center)
/proc/get_adjacent_open_areas(atom/center)
/**
/proc/get_bbox_of_atoms(list/atoms)
/proc/get_hear(range, atom/source)
/proc/alone_in_area(area/the_area, mob/must_be_alone, check_type = /mob/living/carbon)
/proc/cheap_hypotenuse(Ax,Ay,Bx,By)
/proc/circlerange(center=usr,radius=3)
/proc/circleview(center=usr,radius=3)
/proc/get_dist_euclidian(atom/Loc1 as turf|mob|obj,atom/Loc2 as turf|mob|obj)
/proc/circlerangeturfs(center=usr,radius=3)
/proc/circleviewturfs(center=usr,radius=3)		//Is there even a diffrence between this proc and circlerangeturfs()?
/** recursive_organ_check
/proc/recursive_organ_check(atom/O)
/proc/recursive_mob_check(atom/O,client_check=1,sight_check=1,include_radio=1)
/proc/get_hearers_in_view(R, atom/source)
/proc/get_hearers_in_range(R, atom/source)
/proc/fov_viewers(depth = world.view, atom/center)
/proc/get_mobs_in_radio_ranges(list/obj/item/radio/radios)
/proc/inLineOfSight(X1,Y1,X2,Y2,Z=1,PX1=16.5,PY1=16.5,PX2=16.5,PY2=16.5)
/proc/isInSight(atom/A, atom/B)
/proc/get_cardinal_step_away(atom/start, atom/finish) //returns the position of a step from start away from finish, in one of the cardinal directions
/proc/try_move_adjacent(atom/movable/AM)
/proc/get_mob_by_key(key)
/proc/considered_alive(datum/mind/M, enforce_human = TRUE)
/proc/considered_afk(datum/mind/M)
/proc/ScreenText(obj/O, maptext="", screen_loc="CENTER-7,CENTER-7", maptext_height=480, maptext_width=480)
/proc/remove_image_from_client(image/image, client/remove_from)
/proc/remove_images_from_clients(image/I, list/show_to)
/proc/flick_overlay(image/I, list/show_to, duration)
/proc/flick_overlay_view(image/I, atom/target, duration) //wrapper for the above, flicks to everyone who can see the target atom
/proc/get_active_player_count(var/alive_check = 0, var/afk_check = 0, var/human_check = 0)
/proc/showCandidatePollWindow(mob/M, poll_time, Question, list/candidates, ignore_category, time_passed, flashwindow = TRUE)
/proc/pollGhostCandidates(Question, jobbanType, datum/game_mode/gametypeCheck, be_special_flag = 0, poll_time = 300, ignore_category = null, flashwindow = TRUE)
/proc/pollCandidates(Question, jobbanType, datum/game_mode/gametypeCheck, be_special_flag = 0, poll_time = 300, ignore_category = null, flashwindow = TRUE, list/group = null)
/proc/pollCandidatesForMob(Question, jobbanType, datum/game_mode/gametypeCheck, be_special_flag = 0, poll_time = 300, mob/M, ignore_category = null)
/proc/pollCandidatesForMobs(Question, jobbanType, datum/game_mode/gametypeCheck, be_special_flag = 0, poll_time = 300, list/mobs, ignore_category = null)
/proc/poll_helper(var/mob/living/M)
/proc/makeBody(mob/dead/observer/G_found) // Uses stripped down and bastardized code from respawn character
/proc/send_to_playing_players(thing) //sends a whatever to all playing players; use instead of to_chat(world, where needed)
/proc/window_flash(client/C, ignorepref = FALSE)
/proc/recursive_loc_check(atom/movable/target, type)
/proc/announce_arrival(mob/living/carbon/human/character, rank)
/proc/lavaland_equipment_pressure_check(turf/T)
/proc/ispipewire(item)
/proc/find_obstruction_free_location(var/range, var/atom/center, var/area/specific_area)
/proc/power_fail(duration_min, duration_max)
/proc/make_datum_references_lists()
/proc/init_subtypes(prototype, list/L)
/proc/init_paths(prototype, list/L)
/proc/init_ref_coin_values()
/*
/*
/icon/proc/ChangeOpacity(opacity = 1)
/icon/proc/GrayScale()
/icon/proc/ColorTone(tone)
/icon/proc/MinColors(icon)
/icon/proc/MaxColors(icon)
/icon/proc/Opaque(background = "#000000")
/icon/proc/BecomeAlphaMask()
/icon/proc/UseAlphaMask(mask)
/icon/proc/AddAlphaMask(mask)
/*
/proc/ReadRGB(rgb)
/proc/ReadHSV(hsv)
/proc/HSVtoRGB(hsv)
/proc/RGBtoHSV(rgb)
/proc/hsv(hue, sat, val, alpha)
/*
/proc/BlendHSV(hsv1, hsv2, amount)
/*
/proc/BlendRGB(rgb1, rgb2, amount)
/proc/BlendRGBasHSV(rgb1, rgb2, amount)
/proc/HueToAngle(hue)
/proc/AngleToHue(angle)
/proc/RotateHue(hsv, angle)
/proc/GrayScale(rgb)
/proc/ColorTone(rgb, tone)
/proc/GetColors(hex)
/proc/getFlatIcon(image/A, defdir, deficon, defstate, defblend, start = TRUE, no_anim = FALSE)
/proc/getIconMask(atom/A)//By yours truly. Creates a dynamic mask for a mob/whatever. /N
/proc/getHologramIcon(icon/A, safety = TRUE)//If safety is on, a new icon is not created.
/proc/getPAIHologramIcon(icon/A, safety = TRUE)
/proc/getStaticIcon(icon/A, safety = TRUE)
/proc/getBlankIcon(icon/A, safety=1)
/proc/getLetterImage(atom/A, letter= "", uppercase = 0)
/proc/getRandomAnimalImage(atom/A)
/proc/DrawPixel(icon/I,colour,drawX,drawY)
/proc/get_flat_human_icon(icon_id, datum/job/J, datum/preferences/prefs, dummy_key, showDirs = GLOB.cardinals, outfit_override = null, no_anim = FALSE)
/image/proc/setDir(newdir)
/proc/generate_asset_name(file)
/**
/proc/icon2base64(icon/icon)
/proc/icon2html(thing, target, icon_state, dir = SOUTH, frame = 1, moving = FALSE, sourceonly = FALSE)
/proc/icon2base64html(thing)
/proc/costly_icon2html(thing, target, sourceonly = FALSE)
/* Gives the result RGB of a RGB string after a matrix transformation. No alpha.
/proc/RGBMatrixTransform(list/color, list/cm)
/*
/turf/var/list/fixed_underlay = null
/proc/calculate_adjacencies(atom/A)
/proc/smooth_icon(atom/A)
/turf/closed/wall/diagonal_smooth(adjacencies)
/proc/cardinal_smooth(atom/A, adjacencies)
/proc/find_type_in_direction(atom/source, direction)
/proc/smooth_zlevel(var/zlevel, now = FALSE)
/proc/reverse_ndir(ndir)
/proc/queue_smooth_neighbors(atom/A)
/proc/queue_smooth(atom/A)
/turf/closed/wall/smooth
/proc/emissive_appearance(icon, icon_state = "", layer = FLOAT_LAYER, alpha = 255, appearance_flags = NONE)
/proc/markov_chain(var/text, var/order = 4, var/length = 250)
/proc/markov_table(var/text, var/look_forward = 4)
/proc/markov_text(var/length = 250, var/table, var/look_forward = 4)
/proc/markov_weighted_char(var/list/array)
/*
/proc/soft_cap(var/input, var/cap = 0, var/groupsize = 1, var/groupmult = 0.9)
/proc/random_blood_type()
/proc/random_eye_color()
/proc/random_underwear(gender)
/proc/random_undershirt(gender)
/proc/random_socks()
/proc/random_features(intendedspecies, intended_gender)
/proc/random_hair_style(gender)
/proc/random_facial_hair_style(gender)
/proc/random_unique_name(gender, attempts_to_find_unique_name=10)
/proc/random_unique_lizard_name(gender, attempts_to_find_unique_name=10)
/proc/random_unique_plasmaman_name(attempts_to_find_unique_name=10)
/proc/random_unique_ethereal_name(attempts_to_find_unique_name=10)
/proc/random_unique_moth_name(attempts_to_find_unique_name=10)
/proc/random_unique_arachnid_name(attempts_to_find_unique_name=10)
/proc/random_skin_tone()
/proc/age2agedescription(age)
/proc/is_species(A, species_datum)
/proc/spawn_atom_to_turf(spawn_type, target, amount, admin_spawn=FALSE, list/extra_args)
/proc/spawn_and_random_walk(spawn_type, target, amount, walk_chance=100, max_walk=3, always_max_walk=FALSE, admin_spawn=FALSE)
/proc/deadchat_broadcast(message, source=null, mob/follow_target=null, turf/turf_target=null, speaker_key=null, message_type=DEADCHAT_REGULAR, admin_only=FALSE)
/proc/create_random_mob(spawn_location, mob_class = HOSTILE_SPAWN)
/proc/passtable_on(target, source)
/proc/passtable_off(target, source)
/proc/dance_rotate(atom/movable/AM, datum/callback/callperrotate, set_original_dir=FALSE)
/proc/mouse_angle_from_client(client/client)
/proc/mouse_absolute_datum_map_position_from_client(client/client)
/proc/lizard_name(gender)
/proc/ethereal_name()
/proc/plasmaman_name()
/proc/moth_name()
/proc/arachnid_name()
/proc/command_name()
/proc/change_command_name(name)
/proc/station_name()
/proc/set_station_name(newname)
/proc/new_station_name()
/proc/syndicate_name()
/proc/generate_code_phrase(return_list=FALSE)//Proc is used for phrase and response in master_controller.dm
/**
/**
/proc/get_path_to(caller, end, max_distance = 30, mintargetdist, id=null, simulated_only = TRUE, turf/exclude, skip_first=TRUE)
/**
/proc/HeapPathWeightCompare(datum/jps_node/a, datum/jps_node/b)
/**
/**
/**
/**
/turf/proc/LinkBlockedWithAccess(turf/destination_turf, caller, ID)
/proc/priority_announce(text, title = "", sound, type , sender_override, has_important_message)
/**
/proc/call_emergency_meeting(mob/living/user, area/button_zone)
/proc/print_command_report(text = "", title = null, announce=TRUE)
/proc/minor_announce(message, title = "Attention:", alert, html_encode = TRUE)
/client/p_they(capitalized, temp_gender)
/client/p_their(capitalized, temp_gender)
/client/p_them(capitalized, temp_gender)
/client/p_have(temp_gender)
/client/p_are(temp_gender)
/client/p_were(temp_gender)
/client/p_do(temp_gender)
/client/p_s(temp_gender)
/client/p_es(temp_gender)
/proc/______qdel_list_wrapper(list/L) //the underscores are to encourage people not to use this directly.
/proc/get_rad_contents(atom/location)
/proc/radiation_pulse(atom/source, intensity, range_modifier, log=FALSE, can_contaminate=TRUE)
/proc/sanitize_frequency(frequency, free = FALSE)
/proc/format_frequency(frequency)
/proc/unformat_frequency(frequency)
/proc/return_unused_frequency(free = FALSE)
/proc/chem_recipes_do_conflict(datum/chemical_reaction/r1, datum/chemical_reaction/r2)
/proc/get_chemical_reaction(id)
/proc/remove_chemical_reaction(datum/chemical_reaction/R)
/proc/add_chemical_reaction(datum/chemical_reaction/R)
/proc/choose_reagent_id(mob/user)
/proc/find_reagent_object_from_type(input)
/proc/is_reagent_processing_invalid(datum/reagent/R, mob/living/owner)
/client/proc/roundend_report_file()
/**
/proc/cmp_antag_category(datum/antagonist/A,datum/antagonist/B)
/proc/printplayer(datum/mind/ply, fleecheck)
/proc/printplayerlist(list/players,fleecheck)
/proc/printobjectives(list/objectives)
/proc/sanitize_integer(number, min=0, max=1, default=0)
/proc/sanitize_num_clamp(number, min=0, max=1, default=0, quantize=0)
/proc/sanitize_text(text, default="")
/proc/sanitize_islist(value, default)
/proc/sanitize_inlist(value, list/List, default)
/proc/sanitize_gender(gender,neuter=0,plural=0, default="male")
/**
/proc/sanitize_hexcolor(color, desired_format = 3, include_crunch = 0, default = rgb(218, 72, 255), default_replacement = "f")
/proc/sanitize_ooccolor(color)
/world/proc/shelleo(command)
/proc/shell_url_scrub(url)
/proc/render_stats(list/stats, user, sort = /proc/cmp_generic_stat_item_time)
/*
/*
/proc/format_table_name(table as text)
/*
/proc/strip_html_simple(t,limit=MAX_MESSAGE_LEN)
/proc/sanitize_simple(t,list/repl_chars = list("\n"="#","\t"="#"))
/proc/sanitize_name(t,list/repl_chars = null)
/proc/sanitize_filename(t)
/proc/sanitize(t,list/repl_chars = null)
/proc/strip_html(t,limit=MAX_MESSAGE_LEN)
/proc/adminscrub(t,limit=MAX_MESSAGE_LEN)
/proc/reject_bad_text(text, max_length = 512, ascii_only = TRUE)
/proc/stripped_input(mob/user, message = "", title = "", default = "", max_length=MAX_MESSAGE_LEN, no_trim=FALSE)
/proc/stripped_multiline_input(mob/user, message = "", title = "", default = "", max_length=MAX_MESSAGE_LEN, no_trim=FALSE)
/**
/proc/stripped_multiline_input_or_reflect(mob/user, message = "", title = "", default = "", max_length=MAX_MESSAGE_LEN, no_trim=FALSE)
/proc/reject_bad_name(t_in, allow_numbers = FALSE, max_length = MAX_NAME_LEN, ascii_only = TRUE)
/proc/non_zero_min(a, b)
/proc/text_in_list(haystack, list/needle_list, start=1, end=0)
/proc/text_in_list_case(haystack, list/needle_list, start=1, end=0)
/proc/add_leading(text, count, char = " ")
/proc/add_trailing(text, count, char = " ")
/proc/trim_left(text)
/proc/trim_right(text)
/proc/trim(text, max_length)
/proc/capitalize(t as text)
/proc/stringmerge(text,compare,replace = "*")
/proc/stringpercent(text,character = "*")
/proc/reverse_text(text = "")
/proc/random_string(length, list/characters)
/proc/repeat_string(times, string="")
/proc/random_short_color()
/proc/random_color()
/proc/merge_text(into, from, null_char="_")
/proc/findchar(haystack, needles, start=1, end=0)
/proc/parsemarkdown_basic_step1(t, limited=FALSE)
/proc/parsemarkdown_basic_step2(t)
/proc/parsemarkdown_basic(t, limited=FALSE)
/proc/parsemarkdown(t, mob/user=null, limited=FALSE)
/proc/text2charlist(text)
/proc/rot13(text = "")
/proc/twitterize(list/proposed, filename, cullshort = 1, storemax = 1000)
/proc/apply_text_macros(string)
/proc/thtotext(number)
/proc/random_capital_letter()
/proc/unintelligize(message)
/proc/scramble_message_replace_chars(original, replaceprob = 25, list/replacementchars = list("$", "@", "!", "#", "%", "^", "&", "*"), replace_letters_only = FALSE, replace_whitespace = FALSE)
/proc/readable_corrupted_text(text)
/proc/readd_quotes(var/t)
/proc/TextPreview(string, len = 40)
/proc/log_mentor(text)
/proc/log_looc(text)
/proc/station_time_debug(force_set)
/* Returns 1 if it is the selected month and day */
/proc/isDay(month, day)
/proc/SQLtime(timevar)
/proc/update_midnight_rollover()
/proc/weekdayofthemonth()
/proc/DisplayTimeText(time_value, round_seconds_to = 0.1)
/proc/daysSince(realtimev)
/proc/worldtime2text(wtime = world.timeofday)
/proc/gameTimestamp(format = "hh:mm:ss", wtime=world.time)
/*
/proc/hex2num(hex, safe=FALSE)
/proc/num2hex(num, len=2)
/world/proc/file2list(filename, seperator="\n", trim = TRUE)
/proc/dir2text(direction)
/proc/text2dir(direction)
/proc/angle2dir(degree)
/proc/angle2dir_cardinal(angle)
/proc/dir2angle(D)
/proc/angle2text(degree)
/proc/blendMode2iconMode(blend_mode)
/proc/rights2text(rights, seperator="", prefix = "+")
/proc/rgb2hsl(red, green, blue)
/proc/hsl2rgb(hue, saturation, lightness)
/proc/hue2rgb(a, b, hue)
/proc/unix2date(timestamp, seperator = "-")
/proc/isLeap(y)
/proc/zone2body_parts_covered(def_zone)
/proc/body_parts_covered2organ_names(bpc)
/proc/slot2body_zone(slot)
/proc/heat2colour(temp)
/proc/heat2colour_r(temp)
/proc/heat2colour_g(temp)
/proc/heat2colour_b(temp)
/proc/instability2text(instability) //used when displaying fusion power on analyzers
/proc/color2hex(color)	//web colors
/proc/string2listofvars(var/t_string, var/datum/var_source)
/proc/color_hex2num(A)
/proc/color_hex2color_matrix(string)
/proc/color_matrix2color_hex(list/the_matrix)
/proc/type2parent(child)
/proc/type2top(the_type)
/proc/url2htmlloader(url)
/proc/strtohex(str)
/proc/hextostr(str, safe=FALSE)
/proc/slot_to_string(slot)
/proc/tg_ui_icon_to_cit_ui(ui_style)
/proc/tallytypelistsavings()
/proc/make_types_fancy(var/list/types)
/proc/get_fancy_list_of_atom_types()
/proc/get_fancy_list_of_datum_types()
/proc/filter_fancy_list(list/L, filter as text)
/*
/proc/invertHTML(HTMLstring)
/proc/get_teleport_loc(turf/location,mob/target,distance = 1, density = FALSE, errorx = 0, errory = 0, eoffsetx = 0, eoffsety = 0)
/*
/proc/getline(atom/M,atom/N)//Ultra-Fast Bresenham Line-Drawing Algorithm
/proc/IsGuestKey(key)
/proc/ionnum()
/proc/active_free_borgs()
/proc/active_ais(check_mind=0)
/proc/select_active_ai_with_fewest_borgs()
/proc/select_active_free_borg(mob/user)
/proc/select_active_ai(mob/user)
/proc/getpois(mobs_only = FALSE, skip_mindless = FALSE, specify_dead_role = TRUE)
/proc/sortmobs()
/proc/DisplayPower(powerused)
/proc/DisplayEnergy(units)
/proc/get_mob_by_ckey(key)
/**
/proc/get_atom_on_turf(atom/movable/something_in_turf, stop_type)
/proc/get_nested_locs(atom/movable/M, include_turf = FALSE)
/proc/get_edge_target_turf(atom/A, direction)
/proc/get_ranged_target_turf(atom/A, direction, range)
/**
/proc/get_ranged_target_turf_direct(atom/A, atom/target, range, offset)
/proc/get_offset_target_turf(atom/A, dx, dy)
/*
/proc/can_see(atom/source, atom/target, length=5) // I couldnt be arsed to do actual raycasting :I This is horribly inaccurate.
/proc/is_blocked_turf(turf/T, exclude_mobs)
/proc/is_anchored_dense_turf(turf/T) //like the older version of the above, fails only if also anchored
/proc/get_step_towards2(atom/ref , atom/trg)
/proc/hasvar(datum/A, varname)
/proc/get_cardinal_dir(atom/A, atom/B)
/proc/anyprob(value)
/proc/view_or_range(distance = world.view , center = usr , type)
/proc/oview_or_orange(distance = world.view , center = usr , type)
/proc/parse_zone(zone)
/*
/proc/get_turf_pixel(atom/AM)
/proc/parse_caught_click_modifiers(list/modifiers, turf/origin, client/viewing_client)
/proc/getPixelDistance(atom/A, atom/B, centered = TRUE)
/proc/get(atom/loc, type)
/*
/proc/gotwallitem(loc, dir, var/check_external = 0)
/proc/format_text(text)
/proc/check_target_facings(mob/living/initator, mob/living/target)
/proc/random_step(atom/movable/AM, steps, chance)
/proc/living_player_count()
/proc/randomColor(mode = 0)	//if 1 it doesn't pick white, black or gray
/proc/params2turf(scr_loc, turf/origin, client/C)
/proc/screen_loc2turf(text, turf/origin, client/C)
/proc/IsValidSrc(datum/D)
/proc/is_A_facing_B(atom/A,atom/B)
/*
/proc/center_image(var/image/I, x_dimension = 0, y_dimension = 0)
/proc/urange(dist=0, atom/center=usr, orange=0, areas=0)
/proc/spiral_range(dist=0, center=usr, orange=0)
/proc/spiral_range_turfs(dist=0, center=usr, orange=0, list/outlist = list(), tick_checked)
/proc/flick_overlay_static(O, atom/A, duration)
/proc/get_random_station_turf()
/proc/get_safe_random_station_turf(list/areas_to_pick_from = GLOB.the_station_areas) //excludes dense turfs (like walls) and areas that have valid_territory set to FALSE
/proc/get_closest_atom(type, list, source)
/proc/pick_closest_path(value, list/matches = get_fancy_list_of_atom_types())
/proc/stack_trace(msg)
/proc/gib_stack_trace()
/proc/stoplag(initial_delay)
/proc/flash_color(mob_or_client, flash_color="#960000", flash_time=20)
/proc/random_nukecode()
/proc/weightclass2text(var/w_class)
/proc/dview(range = world.view, center, invis_flags = 0)
/**
/proc/valid_window_location(turf/dest_turf, test_dir, is_fulltile = FALSE)
/proc/pass(...)
/proc/get_mob_or_brainmob(occupant)
/proc/BitCount(bitfield)
/proc/do_atom(atom/movable/user , atom/movable/target, time = 30, uninterruptible = 0,datum/callback/extra_checks = null)
/proc/GUID()
/proc/REF(input)
/world/proc/PushUsr(mob/M, datum/callback/CB, ...)
/proc/servants_and_ghosts()
/proc/___callbackvarset(list_or_datum, var_name, var_value)
/proc/___TraitAdd(target,trait,source)
/proc/___TraitRemove(target,trait,source)
/proc/get_random_food()
/proc/get_random_drink()
/proc/weakref_filter_list(list/things, list/refs)
/proc/weakref_filter_list_reverse(list/things, list/refs)
/proc/special_list_filter(list/L, datum/callback/condition)
/proc/CallAsync(datum/source, proctype, list/arguments)
/proc/num2sign(numeric)
/proc/browser_keycode_to_byond(keycode)
/proc/generate_items_inside(list/items_list, where_to)
/proc/blood_sucking_checks(var/mob/living/carbon/target, check_neck, check_blood)
/proc/atoms2vector(var/atom/A, var/atom/B)
/**
/proc/add_verb(client/target, verb_or_list_to_add)
/**
/proc/remove_verb(client/target, verb_or_list_to_remove)
/proc/getviewsize(view)
/proc/in_view_range(mob/user, atom/A)
/proc/yelling_wavefill(atom/source, dist = 50)
/proc/get_matrix_largest()
/proc/get_matrix_large()
/proc/get_matrix_norm()
/proc/get_matrix_small()
/proc/get_matrix_smallest()
/proc/get_racelist(mob/user)//This proc returns a list of species that 'user' has available to them. It searches the list of ckeys attached to the 'whitelist' var for a species and also checks if they're an admin.
/client/proc/reload_mentors()
/*pretty much everything got moved to modular_skyrat (interactions)
/client/proc/give_humans_genitals()
/proc/extools_log_write()
/proc/extools_finalize_logging()
/proc/auxtools_stack_trace(msg)
/*
/*
/****
/proc/english_list(list/input, nothing_text = "nothing", and_text = " and ", comma_text = ", ", final_comma_text = "" )
/**
/proc/english_list_assoc(list/input, nothing_text = "nothing", and_text = " and ", comma_text = ", ", final_comma_text = "")
/proc/listgetindex(list/L, index)
/proc/safepick(list/L)
/proc/isemptylist(list/L)
/proc/is_type_in_list(atom/A, list/L)
/proc/is_string_in_list(string, list/L)
/proc/remove_strings_from_list(string, list/L)
/proc/typecache_filter_list(list/atoms, list/typecache)
/proc/typecache_filter_list_reverse(list/atoms, list/typecache)
/proc/typecache_filter_multi_list_exclusion(list/atoms, list/typecache_include, list/typecache_exclude)
/proc/typecacheof(path, ignore_root_path, only_root_path = FALSE)
/proc/typecacheof_assoc_list(list/pathlist, ignore_root_path = FALSE)
/proc/clearlist(list/list)
/proc/listclearnulls(list/L)
/*
/proc/difflist(list/first, list/second, skiprep=0)
/*
/proc/uniquemergelist(list/first, list/second, skiprep=0)
/proc/pickweight(list/L, base_weight = 1)
/proc/pickweightAllowZero(list/L) //The original pickweight proc will sometimes pick entries with zero weight.  I'm not sure if changing the original will break anything, so I left it be.
/proc/pickweight_mult(list/L, quantity, base_weight = 1)
/proc/pick_n_take(list/L)
/proc/pickweight_n_take(list/L, base_weight = 1)
/proc/pop(list/L)
/proc/popleft(list/L)
/proc/sorted_insert(list/L, thing, comparator)
/proc/next_list_item(item, list/L)
/proc/previous_list_item(item, list/L)
/proc/shuffle(list/L)
/proc/shuffle_inplace(list/L)
/proc/uniqueList(list/L)
/proc/uniqueList_inplace(list/L)
/proc/sortKey(list/L, order=1)
/proc/sortRecord(list/L, field = "name", order = 1)
/proc/sortList(list/L, cmp=/proc/cmp_text_asc)
/proc/sortNames(list/L, order=1)
/proc/bitfield2list(bitfield = 0, list/wordlist)
/proc/count_by_type(list/L, type)
/proc/count_occurences_of_value(list/L, val, limit) //special thanks to salmonsnake
/proc/find_record(field, value, list/L)
/proc/moveElement(list/L, fromIndex, toIndex)
/proc/moveRange(list/L, fromIndex, toIndex, len=1)
/proc/swapRange(list/L, fromIndex, toIndex, len=1)
/proc/reverseRange(list/L, start=1, end=0)
/proc/getElementByVar(list/L, varname, value)
/proc/removeNullsFromList(list/L)
/proc/deepCopyList(list/l)
/proc/avoid_assoc_duplicate_keys(input_key, list/used_key_list)
/proc/flatten_list(list/key_list)
/proc/make_associative(list/flat_list)
/proc/deep_list2params(list/deep_list)
/* Definining a counter as a series of key -> numeric value entries
/proc/counterlist_scale(list/L, scalar)
/proc/counterlist_sum(list/L)
/proc/counterlist_normalise(list/L)
/proc/counterlist_combine(list/L1, list/L2)
/proc/assoc_list_strip_value(list/input)
/proc/compare_list(list/l,list/d)
/proc/is_type_in_ref_list(path, list/L)
/proc/safe_json_encode(list/L, default = "")
/proc/safe_json_decode(string, default = list())
/proc/warning(msg)
/proc/notice(msg)
/proc/log_test(text)
/proc/log_harddel(text)
/* Items with ADMINPRIVATE prefixed are stripped from public logs. */
/proc/log_admin(text)
/proc/log_admin_private(text)
/proc/log_adminsay(text)
/proc/log_dsay(text)
/proc/log_consent(text)
/* All other items are public. */
/proc/log_game(text)
/proc/log_mecha(text)
/proc/log_virus(text)
/proc/log_asset(text)
/proc/log_access(text)
/**
/proc/log_suspicious_login(text, access_log_mirror = TRUE)
/proc/log_law(text)
/proc/log_attack(text)
/proc/log_victim(text)
/proc/log_manifest(ckey, datum/mind/mind,mob/body, latejoin = FALSE)
/proc/log_say(text)
/proc/log_ooc(text)
/proc/log_whisper(text)
/proc/log_emote(text)
/proc/log_subtler(text)
/proc/log_prayer(text)
/proc/log_pda(text)
/proc/log_comment(text)
/proc/log_paper(text)
/proc/log_telecomms(text)
/proc/log_econ(text)
/proc/log_chat(text)
/proc/log_vote(text)
/proc/log_shuttle(text)
/proc/log_craft(text)
/proc/log_topic(text)
/proc/log_href(text)
/proc/log_sql(text)
/proc/log_qdel(text)
/proc/log_query_debug(text)
/proc/log_job_debug(text)
/proc/log_subsystem(subsystem, text)
/proc/log_click(atom/object, atom/location, control, params, client/C, event = "clicked", unexpected)
/* Log to both DD and the logfile. */
/proc/log_world(text)
/* Log to the logfile only. */
/proc/log_runtime(text)
/* Rarely gets called; just here in case the config breaks. */
/proc/log_config(text)
/proc/log_mapping(text)
/proc/log_perf(list/perf_info)
/proc/log_reagent(text)
/proc/log_reagent_transfer(text)
/* For logging round startup. */
/proc/start_log(log)
/**
/proc/log_tgui(user, message, context,
/* Close open log handles. This should be called as late as possible, and no logging should hapen after. */
/proc/shutdown_logging()
/* Helper procs for building detailed log lines */
/proc/key_name(whom, include_link = null, include_name = TRUE)
/proc/key_name_admin(whom, include_name = TRUE)
/proc/loc_name(atom/A)
/proc/strings_replacement(filename, key)
/proc/strings(filename as text, key as text)
/proc/strings_subkey_lookup(match, group1)
/proc/load_strings_file(filename)
/* Documenting a couple of potentially useful color matrices here to inspire ideas
/proc/color_matrix_identity()
/proc/color_matrix_lightness(power)
/proc/color_matrix_saturation(value)
/**
/proc/color_matrix_saturation_percent(percent)
/proc/color_matrix_contrast(value)
/**
/proc/color_matrix_contrast_percent(percent)
/proc/color_matrix_rotate_hue(angle)
/**
/proc/color_matrix_rotation(angle)
/proc/color_matrix_rotate_x(angle)
/proc/color_matrix_rotate_y(angle)
/proc/color_matrix_rotate_z(angle)
/**
/proc/color_matrix_hsv(hue, saturation, value)
/proc/color_matrix_add(list/A, list/B)
/proc/color_matrix_multiply(list/A, list/B)
/**
/proc/rgb_construct_color_matrix(rr = 1, rg, rb, gr, gg = 1, gb, br, bg, bb = 1, cr, cg, cb)
/**
/proc/rgba_construct_color_matrix(rr = 1, rg, rb, ra, gr, gg = 1, gb, ga, br, bg, bb = 1, ba, ar, ag, ab, aa = 1, cr, cg, cb, ca)
/matrix/proc/TurnTo(old_angle, new_angle)
/matrix/proc/tolist()
/*
/matrix/proc/togrid()
/matrix/proc/get_x_shift()
/matrix/proc/get_y_shift()
/matrix/proc/get_x_skew()
/matrix/proc/get_y_skew()
/matrix/proc/set_skew(x = 0, y = 0)
/**
/proc/transform_matrix_construct(a = 1, b, c, d = 1, e, f)
/proc/sortInsert(list/L, cmp=/proc/cmp_numeric_asc, associative, fromIndex=1, toIndex=0)
/proc/sortMerge(list/L, cmp=/proc/cmp_numeric_asc, associative, fromIndex=1, toIndex)
/proc/sortTim(list/L, cmp=/proc/cmp_numeric_asc, associative, fromIndex=1, toIndex=0)
/*
/*
/*
/**
/*
/*
/*
/*
/*
/*
/*
/*
/*
/*
/proc/get_size(mob/living/target)
/*
/*
/*
/*
/client/verb/wiki(query as text)
/client/verb/discord()
/client/verb/rules()
/client/verb/github()
/client/verb/reportissue()
/client/verb/changelog()
/*
/client/verb/updatemenuchecked(menutype as text, verbpath as text)
/client/script = {"<style>
/*//////////////////////////////////////////
/client/New()
/client/proc/citadel_client_procs(href_list)
/client/proc/mentor_datum_set(admin)
/client/proc/is_mentor() // admins are mentors too.
/client/verb/togglerightclickstuff()
/*Commenting out Until next Christmas or made automatic
/*Commenting out Until next Christmas or made automatic
/proc/load_loadout_config(loadout_config)
/proc/initialize_global_loadout_items()
/client/verb/mentorwho()
/client/verb/who()
/client/proc/show_admin_info(var/client/C)
/client/verb/adminwho()
/*/////////////////////////////////////////////////////////////////////////////////
/*/////////////////////////////////////////////////////////////////////////////////
/*Itemlists are formatted as
/proc/handle_roundstart_items(mob/living/M, ckey_override, job_override, special_override)
/proc/load_itemlist_to_mob(mob/living/L, list/itemlist, drop_on_floor_if_full = TRUE, load_to_all_slots = TRUE, replace_slots = FALSE)
/proc/load_itemlist_to_human(mob/living/carbon/human/H, list/itemlist, drop_on_floor_if_full = TRUE, load_to_all_slots = TRUE, replace_slots = FALSE)
/proc/reload_custom_roundstart_items_list(custom_filelist)
/proc/parse_custom_roundstart_items(ckey, char_name = "ALL", job_name = "ALL", special_role)
/*
/*
/*
/turf/closed/indestructible/spookytime/matrixblocker //Two times the reference power.
/*
/turf/open/floor/spooktime //But for now, we just handle what is outside, for light control etc.
/turf/open/floor/spooktime/break_tile()
/turf/open/floor/spooktime/burn_tile()
/turf/open/floor/spooktime/pry_tile(obj/item/I, mob/user, silent = FALSE)
/*
/turf/open/floor/plating/spookbase/dirtattachmentpoint //Lighted variant
/turf/open/floor/plating/spookbase/dirtattachmentpoint/mountain
/turf/open/floor/plating/spookbase/sandattachmentpoint
/*
/*
/turf/open/floor/spooktime/nonspooktimegrass
/turf/open/floor/spooktime/nonspooktimegrass/Initialize(mapload) //Init rng icon.
/turf/open/floor/spooktime/nonspooktimegrass/attackby(obj/item/C, mob/user, params) //We dig it out with a shovel.
/turf/open/floor/spooktime/dirtpatch
/turf/open/floor/spooktime/dirtpatch/attackby(obj/item/C, mob/user, params) //We dig it out with a shovel.
/turf/open/floor/spooktime/snow
/turf/open/floor/spooktime/snow/try_replace_tile(obj/item/stack/tile/T, mob/user, params)
/turf/open/floor/spooktime/snow/crowbar_act(mob/living/user, obj/item/I)
/*
/turf/open/floor/spooktime/spooktimegrass
/turf/open/floor/spooktime/spooktimegrass/Initialize(mapload) //Considering adding dirtgen here too.
/turf/open/floor/spooktime/spooktimegrass/attackby(obj/item/C, mob/user, params) //We dig it out with a shovel.
/turf/open/floor/spooktime/spooktimegrass/try_replace_tile(obj/item/stack/tile/T, mob/user, params)
/turf/open/floor/spooktime/spooktimegrass/burn_tile()
/turf/open/floor/spooktime/spooktimegrass/MakeSlippery(wet_setting, min_wet_time, wet_time_to_add, max_wet_time, permanent)
/turf/open/floor/spooktime/spooktimegrass/MakeDry()
/*
/turf/open/floor/spooktime/spooktimegrass/proc/floraGen()
/turf/open/floor/spooktime/spooktimegrass/ChangeTurf(flags = CHANGETURF_INHERIT_AIR)
/*
/*
/*
/*
/*
/turf/closed/wall/mineral/wood
/*
/turf/open/floor/plasteel/damturf //ez search plasteel parent
/turf/open/floor/plasteel/damturf/damage1
/turf/open/floor/plasteel/damturf/damage2
/turf/open/floor/plasteel/damturf/
/turf/open/floor/plasteel/damturf/damage4
/turf/open/floor/plasteel/damturf/damage5
/turf/open/floor/plasteel/damturf/scorched
/turf/open/floor/plasteel/damturf/scorched1
/turf/open/floor/plasteel/damturf/scorched2
/turf/open/floor/plasteel/damturf/platdmg1
/turf/open/floor/plasteel/damturf/platdmg2
/turf/open/floor/plasteel/damturf/platdmg3
/turf/open/floor/wood/damturf //ez search wood parent
/turf/open/floor/wood/damturf/broken1
/turf/open/floor/wood/damturf/broken2
/turf/open/floor/wood/damturf/broken3
/turf/open/floor/wood/damturf/broken4
/turf/open/floor/wood/damturf/broken5
/turf/open/floor/wood/damturf/broken6
/turf/open/floor/wood/damturf/broken7
/turf/open/floor/spooktime/beach //laketime
/turf/open/floor/spooktime/beach/attackby(obj/item/C, mob/user, params) //We dig it out with a shovel.
/turf/open/floor/spooktime/beach/coasts
/turf/open/floor/spooktime/beach/coasts/attackby(obj/item/C, mob/user, params)
/turf/open/floor/spooktime/beach/coasts/coastS
/turf/open/floor/spooktime/beach/coasts/coastN
/turf/open/floor/spooktime/beach/coasts/coastE
/turf/open/floor/spooktime/beach/coasts/coastW
/turf/open/floor/spooktime/beach/coasts/coastSE
/turf/open/floor/spooktime/beach/coasts/coastSW
/turf/open/floor/spooktime/beach/coasts/coastNE
/turf/open/floor/spooktime/beach/coasts/coastNW
/turf/open/floor/spooktime/beach/coasts/watercoastS
/turf/open/floor/spooktime/beach/coasts/watercoastN
/turf/open/floor/spooktime/beach/coasts/watercoastW
/turf/open/floor/spooktime/beach/coasts/watercoastE
/turf/open/floor/spooktime/beach/coasts/watercoastSE
/turf/open/floor/spooktime/beach/coasts/watercoastSW
/turf/open/floor/spooktime/beach/coasts/watercoastNE
/turf/open/floor/spooktime/beach/coasts/watercoastNW
/turf/open/floor/spooktime/beach/coasts/innerN
/turf/open/floor/spooktime/beach/coasts/innerS
/turf/open/floor/spooktime/beach/coasts/innerE
/turf/open/floor/spooktime/beach/coasts/innerW
/turf/open/floor/spooktime/beach/water
/turf/open/floor/spooktime/beach/water/attackby(obj/item/C, mob/user, params)
/turf/open/floor/spooktime/beach/watersolid //Gotta stop you at a certain point man
/turf/open/floor/spooktime/beach/watersolid/attackby(obj/item/C, mob/user, params)
/turf/open/floor/spooktime/riverwatermotion
/turf/open/floor/spooktime/riverwatermotion/nomotion
/turf/open/floor/spooktime/cobble //Middle and parent
/turf/open/floor/spooktime/cobble/cornerNW //First corner
/turf/open/floor/spooktime/cobble/cornerNE //Now that these are hardcoded individuals.
/turf/open/floor/spooktime/cobble/cornerSW
/turf/open/floor/spooktime/cobble/cornerSE //I found i don't need most of these but still lol.
/turf/open/floor/spooktime/cobble/sideN //First Side
/turf/open/floor/spooktime/cobble/sideS
/turf/open/floor/spooktime/cobble/sideE
/turf/open/floor/spooktime/cobble/sideW
/turf/open/floor/spooktime/cobble/roadmid //Center piece
/turf/open/floor/spooktime/cobble/roadsideN //road edges, I have a lot of these
/turf/open/floor/spooktime/cobble/roadsideS //But i don't feel like adding them all for a temp map.
/turf/open/floor/spooktime/cobble/roadsideE
/turf/open/floor/spooktime/cobble/roadsideW
/turf/open/floor/spooktime/cobble/roadcornerSW
/turf/open/indestructible/spooknecropolis
/*
/*
/turf/open/floor/grass/snow/edina//But for now, we just handle what is outside, for light control etc.
/turf/open/floor/grass/snow/edina/attackby(obj/item/C, mob/user, params)
/turf/open/floor/festive/cobblestone
/turf/open/floor/festive/cobblestone/safe	//this is literally cobblestone but safe for inside use because I don't want to fuck with aesthetics
/turf/open/floor/festive/sidewalk
/turf/open/floor/festive/alleyway
/turf/open/floor/festive/alleyway/safe	//this is literally alleyway but safe for inside use because I don't want to fuck with aesthetics
/turf/open/floor/festive/white_alleyway
/turf/open/floor/festive/trainplatform
/turf/open/floor/festive/trainplatform/safe	//this is literally train platform but safe for inside use because I don't want to remap the strip club
/turf/open/floor/festive/stairs/stairsnorth
/turf/open/floor/festive/stairs/stairssouth
/turf/open/floor/festive/stairs/stairseast
/turf/open/floor/festive/stairs/stairswest
/turf/open/floor/festive/wooden/wooden1
/turf/open/floor/festive/wooden/wooden2
/turf/closed/festive/greybrick
/turf/closed/festive/greybrick/greybrickns
/turf/closed/festive/greybrick/greybrickwe
/turf/closed/festive/greybrick/greybrickcornerse
/turf/closed/festive/greybrick/greybrickcornersw
/turf/closed/festive/greybrick/greybrickcornerne
/turf/closed/festive/greybrick/greybrickcornernw
/turf/closed/festive/greybrick/greybricktn
/turf/closed/festive/greybrick/greybrickts
/turf/closed/festive/greybrick/greybricktw
/turf/closed/festive/greybrick/greybrickte
/turf/closed/festive/redbrick
/turf/closed/festive/redbrick/redbrickns
/turf/closed/festive/redbrick/redbrickwe
/turf/closed/festive/redbrick/redbrickcornerse
/turf/closed/festive/redbrick/redbrickcornersw
/turf/closed/festive/redbrick/redbrickcornerne
/turf/closed/festive/redbrick/redbrickcornernw
/turf/closed/festive/redbrick/redbricktn
/turf/closed/festive/redbrick/redbrickts
/turf/closed/festive/redbrick/redbricktw
/turf/closed/festive/redbrick/redbrickte
/turf/closed/festive/whitebrick
/turf/closed/festive/whitebrick/whitebrickns
/turf/closed/festive/whitebrick/whitebrickwe
/turf/closed/festive/whitebrick/whitebrickcornerse
/turf/closed/festive/whitebrick/whitebrickcornersw
/turf/closed/festive/whitebrick/whitebrickcornerne
/turf/closed/festive/whitebrick/whitebrickcornernw
/turf/closed/festive/whitebrick/whitebricktn
/turf/closed/festive/whitebrick/whitebrickts
/turf/closed/festive/whitebrick/whitebricktw
/turf/closed/festive/whitebrick/whitebrickte
/turf/closed/festive/creambrick
/turf/closed/festive/creambrick/creambrickns
/turf/closed/festive/creambrick/creambrickwe
/turf/closed/festive/creambrick/creambrickcornerse
/turf/closed/festive/creambrick/creambrickcornersw
/turf/closed/festive/creambrick/creambrickcornerne
/turf/closed/festive/creambrick/creambrickcornernw
/turf/closed/festive/creambrick/creambricktn
/turf/closed/festive/creambrick/creambrickts
/turf/closed/festive/creambrick/creambricktw
/turf/closed/festive/creambrick/creambrickte
/turf/closed/festive/bluebrick
/turf/closed/festive/bluebrick/bluebrickns
/turf/closed/festive/bluebrick/bluebrickwe
/turf/closed/festive/bluebrick/bluebrickcornerse
/turf/closed/festive/bluebrick/bluebrickcornersw
/turf/closed/festive/bluebrick/bluebrickcornerne
/turf/closed/festive/bluebrick/bluebrickcornernw
/turf/closed/festive/bluebrick/bluebricktn
/turf/closed/festive/bluebrick/bluebrickts
/turf/closed/festive/bluebrick/bluebricktw
/turf/closed/festive/bluebrick/bluebrickte
/turf/closed/festive/greypanel
/turf/closed/festive/greypanel/greypanelns
/turf/closed/festive/greypanel/greypanelwe
/turf/closed/festive/greypanel/greypanelcornerse
/turf/closed/festive/greypanel/greypanelcornersw
/turf/closed/festive/greypanel/greypanelcornerne
/turf/closed/festive/greypanel/greypanelcornernw
/turf/closed/festive/greypanel/greypaneltn
/turf/closed/festive/greypanel/greypanelts
/turf/closed/festive/greypanel/greypaneltw
/turf/closed/festive/greypanel/greypanelte
/client/proc/cmd_mentor_dementor()
/client/proc/cmd_mentor_rementor()
/client/proc/mentor_follow(mob/living/M)
/client/proc/mentor_unfollow()
/proc/RawMentorHrefToken(forceGlobal = FALSE)
/proc/MentorHrefToken(forceGlobal = FALSE)
/proc/load_mentors()
/client
/client/verb/mentorhelp(msg as text)
/proc/get_mentor_counts()
/proc/key_name_mentor(var/whom, var/include_link = null, var/include_name = 0, var/include_follow = 0, var/char_name_only = 0)
/client/proc/cmd_mentor_pm_panel()
/client/proc/cmd_mentor_pm(whom, msg)
/client/proc/cmd_mentor_say(msg as text)
/client/proc/mentor_memo()
/client/proc/show_mentor_memo()
/client/proc/mentor_memo_output(task)
/client/proc/add_mentor_verbs()
/client/proc/remove_mentor_verbs()
/turf/open/get_fake_z()
/*
/*
/*/////////////////////////////////////////////////////////////
/*/////////////////////////////////////////////////////////////////////////////////////////////
/*
/*
/*SDGF
/*
/*Calc_step_angle calculates angle based off pixel x,y movement (x,y in)
/*
/* unsure if needed
/*
/*
/proc/pref_to_num(pref)
/proc/num_to_pref(num)
/*--------------------------------------------------
/proc/playlewdinteractionsound(turf/turf_source, soundin, vol as num, vary, extrarange as num, frequency, falloff, channel = 0, pressure_affected = TRUE, sound/S, envwet = -10000, envdry = 0, manual_x, manual_y, list/ignored_mobs)
/**
/*
/*
/*
/**
/*
/**
/**
/**
/* Shit doesnt work, work on it later
/* Shit doesnt work, do it later
/* commented out to pick shit up
/* commented out to pick shit up
/* Commented out to pick up shit
/**
/turf/open/floor/attackby(obj/item/E, mob/user)
/turf/closed/mineral/uranium/volcanic
/turf/closed/mineral/titanium/volcanic
/turf/open/floor/plasteel/dark
/turf/open/floor/plasteel/airless/dark
/turf/open/floor/plasteel/dark/side
/turf/open/floor/plasteel/dark/corner
/turf/open/floor/plasteel/checker
/turf/open/floor/plasteel/white
/turf/open/floor/plasteel/white/side
/turf/open/floor/plasteel/white/corner
/turf/open/floor/plasteel/airless/white
/turf/open/floor/plasteel/airless/white/side
/turf/open/floor/plasteel/airless/white/corner
/turf/open/floor/plasteel/airless/showroomfloor
/turf/open/floor/plasteel/yellowsiding
/turf/open/floor/plasteel/yellowsiding/corner
/turf/open/floor/plasteel/recharge_floor
/turf/open/floor/plasteel/recharge_floor/asteroid
/turf/open/floor/plasteel/chapel
/turf/open/floor/plasteel/showroomfloor
/turf/open/floor/plasteel/solarpanel
/turf/open/floor/plasteel/airless/solarpanel
/turf/open/floor/plasteel/freezer
/turf/open/floor/plasteel/kitchen_coldroom/freezerfloor
/turf/open/floor/plasteel/grimy
/turf/open/floor/plasteel/cafeteria
/turf/open/floor/plasteel/airless/cafeteria
/turf/open/floor/plasteel/cult
/turf/open/floor/plasteel/vaporwave
/turf/open/floor/plasteel/goonplaque
/turf/open/floor/plasteel/stairs
/turf/open/floor/plasteel/stairs/left
/turf/open/floor/plasteel/stairs/medium
/turf/open/floor/plasteel/stairs/right
/turf/open/floor/plasteel/stairs/old
/turf/open/floor/plasteel/rockvault
/turf/open/floor/plasteel/rockvault/alien
/turf/open/floor/plasteel/rockvault/sandstone
/turf/open/floor/plasteel/elevatorshaft
/turf/open/floor/plasteel/bluespace
/turf/open/floor/plasteel/sepia
/turf/open/floor/plasteel/showroomfloor/shower
/turf/open/floor/plasteel/white
/turf/open/floor/plasteel/dark
/turf/open/floor/plasteel/chapel
/turf/open/floor/plasteel/showroomfloor
/turf/open/floor/plasteel/freezer
/turf/open/floor/plasteel/cafeteria
/turf/open/floor/plasteel/grimy
/turf/open/floor/plasteel/solarpanel
/turf/open/floor/mineral/plastitanium/red
/turf/open/floor/plating
/turf/open/floor/plating/examine(mob/user)
/turf/open/floor/plating/screwdriver_act(mob/living/user, obj/item/I)
/turf/open/floor/plating/welder_act(mob/living/user, obj/item/I)
/turf/open/floor/mineral/titanium/tiled
/turf/open/floor/mineral/titanium/tiled/airless
/turf/open/floor/mineral/titanium/tiled/yellow
/turf/open/floor/mineral/titanium/tiled/yellow/airless
/turf/open/floor/mineral/titanium/tiled/blue
/turf/open/floor/mineral/titanium/tiled/blue/airless
/turf/open/floor/mineral/titanium/tiled/white
/turf/open/floor/mineral/titanium/tiled/white/airless
/turf/open/floor/mineral/titanium/tiled/purple
/turf/open/floor/mineral/titanium/tiled/purple/airless
/turf/open/floor/mineral/titanium/yellow
/turf/open/floor/mineral/titanium/blue
/turf/open/floor/mineral/titanium/white
/turf/open/floor/mineral/titanium/purple
/client/proc/fix_air(turf/open/T in world)
/client/proc/admin_end_shift()
/*
/*crack distilled
/*Videos on what the sword can do:
/*Videos on what the necklace can do:
/proc/flick_emote_popup_on_mob(mob/M, state, time)
/proc/finish_flick(mob/M, I)
/*	switch(get_thirst(src))
/* disabled for now because error: maximum number of internal arrays exceeded (65535)
/*
/* THE GLADIATOR
/*
/*
/*
/**
/**
/**
/proc/get_thirst(mob/living/user)
/*/datum/reagent/dragon_blood/admin
/* Might get deleted, conflicts with other recipes
/*
/* Shit doesnt work, work on it later
/*
/turf/open/floor/carpet/blue/doomed
/turf/closed/wall/mineral/plastitanium/doomed
/turf/open/indestructible/gold
/turf/open/indestructible/diamond
/proc/projectile_trajectory(src_x, src_y, rotation, angle, power)
/proc/tgswho()
/proc/tgsadminwho()
/*
/*
/*
/proc/ui_style_modular(ui_style)
/**
/**
/**
/**
/**
/**
/**
/**
/**
/proc/transfer_randomized_list(list/destination, list/list1, list/list2)
/**
/**
/**
/*
/**
/* --FALLBACK SYSTEM INCASE THE TRAIT FAILS TO WORK. Do NOT enable this without editing ash_storm.dm to deal stamina damage with ash immunity.
/***********************************************
/proc/cryo_find_control_computer(obj/machinery/cryopod/pod = null, urgent = FALSE)
/*
/*
/*
/*
/*
/*
/*
/*/datum/crafting_recipe/leash
/*
/*
/*
/turf/open/floor/grass/layeniasand
/turf/open/floor/grass/layeniasand/break_tile()
/turf/open/floor/grass/layeniasand/burn_tile()
/turf/open/floor/grass/layeniasand/acid_act(acidpwr, acid_volume)
/turf/closed/mineral/ash_rock/layenia
/turf/open/floor/plating/layeniaredder
/turf/open/floor/plating/layeniaredder/break_tile()
/turf/open/floor/plating/layeniaredder/burn_tile()
/turf/open/floor/plating/layeniaredder/acid_act(acidpwr, acid_volume)
/turf/open/floor/plating/smooth
/turf/open/floor/plating/smooth/Initialize()
/turf/open/floor/plating/smooth/grass
/turf/open/floor/plating/smooth/dirt
/turf/open/floor/plating/smooth/grass/lavaland_jungle
/turf/open/floor/plating/smooth/dirt/lavaland_jungle
/turf/open/water/lavaland_jungle
/turf/open/chasm/cloud
/turf/open/chasm/cloud/Initialize()
/turf/open/chasm/cloud/get_smooth_underlay_icon(mutable_appearance/underlay_appearance, turf/asking_turf, adjacency_dir)
/turf/open/floor/wood/shadow
/turf/open/floor/wood/mushroom
/turf/open/floor/mineral/titanium
/turf/open/floor/plating/asteroid/layenia
/turf/open/floor/plating/asteroid/layenia/Initialize()
/turf/open/floor/plating/asteroid/layenia/garden
/proc/set_layenia_light(turf/open/floor/B)
/turf/closed/wall/mineral/wood/shadow
/turf/closed/wall/mineral/wood/shadow/nonmetal
/turf/closed/wall/mineral/wood/mushroom
/turf/closed/wall/mineral/wood/mushroom/nonmetal
/turf/closed/wall/mineral/lead
/client
/*
/client/proc/cmd_player_playtimes()
/*
/client
/client/proc/discordbunker()
/client/proc/adddiscordbypass(ckeytobypass as text) // In case someone's too lazy to verify on discord
/client/proc/revokediscordbypass(ckeytobypass as text) // In case the person you let bypass turned out to be a griefer
/client/proc/discordnulls()
/proc/log_command_message(text, mob/sender, is_emagged)
/client/proc/breadify(atom/movable/target)
/client/proc/bookify(atom/movable/target)
/client/proc/cmd_admin_subtle_headset_message(mob/M, sender = null)
/client/proc/vpnbunker()
/client/proc/addvpnbypass(ckeytobypass as text)
/client/proc/revokevpnbypass(ckeytobypass as text)
/* PROC TO MANAGE LEVELLING UP THIS WAY */
/proc/is_slaver(mob/M)
/*
/*
/*
/* So they can be pulled.
/*
/*
/*
/* //Just not getting this to work.
/client/check_ip_intel()
/client/proc/toggle_quirk(mob/living/carbon/human/H)
/client/proc/toggle_spell(mob/M)
/client/proc/teach_martial_art(mob/living/carbon/C)
/client/proc/set_species(mob/living/carbon/human/H)
/* CITADEL EDIT - We're using top menu instead
/proc/build_genital_fluids_list()
/proc/allowed_gfluid_paths()
/client
/client/verb/show_character_directory()
/client/looc(msg as text)
/client/ooc(msg as text)
/* I'm sorry nuke but cit added their own
/* //doesn't work
/* Already exists
/*
/*
/*
/*
/*
/client/verb/verify_in_discord()
/**
/client/verb/notify_restart()
/*
/* Messes with slippery and other quirky stuff
/*
/****Some extra modifiers to already existing traits****/
/**** moved from core code ****/
/*
/proc/_isclownjob(mob/honker)
/*
/* End Peacekeeper Hypo
/proc/spawn_river_like_gen(target_z, nodes = 4, turf_type = /turf/open/water/lavaland_jungle, whitelist_area = /area/lavaland/surface/outdoors, min_x = RANDOM_LOWER_X, min_y = RANDOM_LOWER_Y, max_x = RANDOM_UPPER_X, max_y = RANDOM_UPPER_Y, new_baseturfs)
/proc/spawn_patch_like_gen(target_z, turf_type = /turf/open/floor/plating/smooth/grass/lavaland_jungle, whitelist_area = /area/lavaland/surface/outdoors, min_x = RANDOM_LOWER_X, min_y = RANDOM_LOWER_Y, max_x = RANDOM_UPPER_X, max_y = RANDOM_UPPER_Y, new_baseturfs, required_distance = 0.4, min_radius = 3, max_radius = 5)
/proc/spawn_lavaland_jungle_flora(turf/T)
/proc/generate_lavaland_jungle_environment(target_z)
/client
/client/proc/spawn_mentor_mouse()
/client/proc/despawn_mentor_mouse()
/client/add_mentor_verbs()
/client/remove_mentor_verbs()
/******************************************
/******************************************
/client
/**
/* //striked out for now because I dont know what the fuck was planned here but this is breaking blood regain.
/*
/*
/turf/closed/mineral/strange
/* this is for when we have multiz lavaland. Replace the walls with these.
/turf/closed/mineral/random/volcanic/strangerock
/turf/closed/mineral/random/volcanic/New()
/**
/**
/**
/**
/**
/**
/**
/**
/**
/**
/proc/ui_style_splurt(ui_style)
/*
/*
/proc/mix_color_from_reagents_hashtable(list/reagent_list)
/**
/proc/podspawn(specifications)
/proc/detongueify(message) //for the half gag speech impediment function of deprivation helmets. could also be used for a standalone ring gag item.
/*
/*
/* TODO: work on server selection for detected admins */
/world
/world/New()
/proc/extract(data, type = PLAYERS)
/*
/proc/dd_file2list(file_path, separator = "\n")
/proc/dd_replacetext(text, search_string, replacement_string)
/proc/dd_replaceText(text, search_string, replacement_string)
/proc/dd_hasprefix(text, prefix)
/proc/dd_hasPrefix(text, prefix)
/proc/dd_hassuffix(text, suffix)
/proc/dd_hasSuffix(text, suffix)
/proc/dd_text2list(text, separator)
/proc/dd_text2List(text, separator)
/proc/dd_list2text(list/the_list, separator)
/proc/dd_centertext(message, length)
/proc/dd_limittext(message, length)
/proc/SliceNDice(dmifile as file)
/turf
/turf
